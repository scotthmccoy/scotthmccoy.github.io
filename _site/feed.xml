<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-07-17T23:34:24-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Scott McCoy’s Developer Blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Fart</title><link href="http://localhost:4000/2020/07/17/fart.html" rel="alternate" type="text/html" title="Fart" /><published>2020-07-17T10:35:00-07:00</published><updated>2020-07-17T10:35:00-07:00</updated><id>http://localhost:4000/2020/07/17/fart</id><content type="html" xml:base="http://localhost:4000/2020/07/17/fart.html"></content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Foo Bar Baz</title><link href="http://localhost:4000/2020/07/17/foo-bar-baz.html" rel="alternate" type="text/html" title="Foo Bar Baz" /><published>2020-07-17T10:32:00-07:00</published><updated>2020-07-17T10:32:00-07:00</updated><id>http://localhost:4000/2020/07/17/foo-bar-baz</id><content type="html" xml:base="http://localhost:4000/2020/07/17/foo-bar-baz.html"></content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Libraries &amp;amp; Frameworks</title><link href="http://localhost:4000/2020/07/17/libraries-frameworks.html" rel="alternate" type="text/html" title="Libraries &amp; Frameworks" /><published>2020-07-17T10:17:00-07:00</published><updated>2020-07-17T10:17:00-07:00</updated><id>http://localhost:4000/2020/07/17/libraries-frameworks</id><content type="html" xml:base="http://localhost:4000/2020/07/17/libraries-frameworks.html">&lt;h1 id=&quot;files-directories-packages-bundles-and-frameworks&quot;&gt;Files, Directories, Packages, Bundles and Frameworks:&lt;/h1&gt;
&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;package&lt;/code&gt; is any directory that the Finder presents to the user as if it were a single file.
Finder considers a directory to be a package if &lt;strong&gt;any&lt;/strong&gt; of the following conditions are true:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The directory has a known filename extension: .app, .bundle, .framework, .plugin, .kext, and so on.&lt;/li&gt;
  &lt;li&gt;The directory has an extension that some other application claims represents a package type; see Document Packages.&lt;/li&gt;
  &lt;li&gt;The directory has its package bit set.
A &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle&lt;/code&gt; is type of &lt;code class=&quot;highlighter-rouge&quot;&gt;package&lt;/code&gt; with a standardized hierarchical structure that holds executable code and the resources used by that code. Apps and &lt;code class=&quot;highlighter-rouge&quot;&gt;frameworks&lt;/code&gt; are examples of &lt;code class=&quot;highlighter-rouge&quot;&gt;bundles&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;libraries-vs-frameworks&quot;&gt;Libraries vs Frameworks&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;Library&lt;/code&gt; is a collection of &lt;code class=&quot;highlighter-rouge&quot;&gt;object files&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;Framework&lt;/code&gt; is a type of &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle&lt;/code&gt; containing a static or dynamic &lt;code class=&quot;highlighter-rouge&quot;&gt;library&lt;/code&gt; and its resources.&lt;/li&gt;
  &lt;li&gt;So, a &lt;code class=&quot;highlighter-rouge&quot;&gt;Framework&lt;/code&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle&lt;/code&gt; (which is also a &lt;code class=&quot;highlighter-rouge&quot;&gt;package&lt;/code&gt;) that contains a &lt;code class=&quot;highlighter-rouge&quot;&gt;library&lt;/code&gt; which is a collection of &lt;code class=&quot;highlighter-rouge&quot;&gt;object files&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;object-files-clang-and-llvm&quot;&gt;Object Files, Clang and LLVM&lt;/h1&gt;
&lt;p&gt;A compiled .m file is outputed by clang as a .o file. These &lt;code class=&quot;highlighter-rouge&quot;&gt;object files&lt;/code&gt; contain symbols for the linker to piece together into a Mach-O Object File. Like gcc, Clang is a compiler for the c-family of languages and is backed by the LLVM compiler infrastructure which stands for “Low Level Virtual Machine” despite it &lt;a href=&quot;https://llvm.org/&quot;&gt;not being a Virtual Machine&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;mach-o-object-files--types&quot;&gt;Mach-O Object Files &amp;amp; Types&lt;/h1&gt;
&lt;p&gt;Distinct from an &lt;code class=&quot;highlighter-rouge&quot;&gt;object file&lt;/code&gt; generated by clang, these &lt;code class=&quot;highlighter-rouge&quot;&gt;Macho-O Object Files&lt;/code&gt; are the various &lt;a href=&quot;https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/MachOTopics/1-Articles/building_files.html&quot;&gt;options for output from Xcode’s linker phase&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/mach_o_types.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;static-vs-dynamic&quot;&gt;Static vs Dynamic&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Static&lt;/th&gt;
      &lt;th&gt;Dynamic&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Library&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;http://localhost:4000/images/static_library.png&quot; alt=&quot;&quot; /&gt; A &lt;strong&gt;.a&lt;/strong&gt; file linked by the Static Linker at compile time. Headers are separate.&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;http://localhost:4000/images/dynamic_library.png&quot; alt=&quot;&quot; /&gt; A &lt;strong&gt;.dylib&lt;/strong&gt; file linked by the Dynamic Linker, or  &lt;code class=&quot;highlighter-rouge&quot;&gt;dyld&lt;/code&gt; as-needed at runtime. The advantage is that libraries can be shared and don’t take up space in each app. For example, all iOS and macOS system libraries are dynamic. The disadvantage is a slower launch/run time since the linking phase must occur during runtime.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Framework&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;http://localhost:4000/images/static_framework.png&quot; alt=&quot;&quot; /&gt; A &lt;code class=&quot;highlighter-rouge&quot;&gt;package&lt;/code&gt; with the &lt;strong&gt;.framework&lt;/strong&gt; extension containing a Static Library and its resources. Linked at compile time.&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;http://localhost:4000/images/dynamic_framework.png&quot; alt=&quot;&quot; /&gt; A &lt;code class=&quot;highlighter-rouge&quot;&gt;package&lt;/code&gt; with the &lt;strong&gt;.framework&lt;/strong&gt; extension containing a Dynamic Library and its resources. These must either be made available by the operating system (As all iOS and MacOS libraries/frameworks are) or be &lt;code class=&quot;highlighter-rouge&quot;&gt;embedded&lt;/code&gt; into the App’s bundle.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;static-vs-dynamic-frameworks-and-swift&quot;&gt;Static vs Dynamic Frameworks and Swift&lt;/h1&gt;
&lt;p&gt;A framework that used swift used to have to be dynamic since they depended on the Swift dylibs. This changed in&lt;/p&gt;

&lt;h1 id=&quot;other-terms&quot;&gt;Other Terms&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Umbrella Framework&lt;/em&gt; - a framework that contains other frameworks. It is not officially supported on iOS. Normally, when you create a framework which has a dependency, the app is responsible for adding that dependency along with your framework into the project.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Modular Framework&lt;/em&gt; - a framework which contains a .modulemap file inside. Modules can contains submodules. The main advantage is that you save a build time with Modular Framework. Note&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;https://theswiftdev.com/deep-dive-into-swift-frameworks/
Defines Module
And
Mach-O Type&lt;/p&gt;

&lt;h1 id=&quot;modulemaps&quot;&gt;Modulemaps&lt;/h1&gt;

&lt;p&gt;When do you need one and why? I’m pretty sure you only need one for Swift-based frameworks?&lt;/p&gt;

&lt;h1 id=&quot;import-versus-import&quot;&gt;#import versus @import&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Xcode 5 added Modules or “Semantic Import” which is enabled by default. It maps all &lt;code class=&quot;highlighter-rouge&quot;&gt;#import&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;#include&lt;/code&gt; to use &lt;code class=&quot;highlighter-rouge&quot;&gt;@import&lt;/code&gt; instead. If clang can find a modulemap with with the same name,  https://stackoverflow.com/questions/18947516/import-vs-import-ios-7&lt;/li&gt;
  &lt;li&gt;https://releases.llvm.org/3.3/tools/clang/docs/Modules.html&lt;/li&gt;
  &lt;li&gt;https://clang.llvm.org/docs/Modules.html#module-map-language&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;real-versus-fake-frameworks&quot;&gt;Real versus Fake Frameworks&lt;/h1&gt;
&lt;p&gt;You can safely skip this section as this distinction is no longer of any real significance, Xcode having fixed this bug(?) in 2014 with the release of Xcode 6.&lt;/p&gt;

&lt;p&gt;In disallowing dynamically linked libraries for iOS Apple accidentally(?) removed static iOS framework creation functionality. Developers responded with the “relocatable object file” bundle hack, which tricked Xcode into building something that mostly resembles a framework, but is really a bundle. Alternately, with some tweaking of Xcode itself you could add the ability to create a static iOS framework back into Xcode using this plugin: &lt;a href=&quot;https://github.com/kstenerud/iOS-Universal-Framework&quot;&gt;iOS-Universal-Framework&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;the-otool-and-lipo-command-line-tools&quot;&gt;The otool and lipo command line tools&lt;/h1&gt;

&lt;h1 id=&quot;how-do-you-handle-code-signing&quot;&gt;How do you handle code signing?&lt;/h1&gt;
&lt;p&gt;TODO: add to this section&lt;/p&gt;

&lt;p&gt;Embedding dylibs now works (checked with Xcode Version 10.2). Targets -&amp;gt; Frameworks, Libraries and Embedded content.
see https://help.apple.com/xcode/mac/11.0/index.html?localePath=en.lproj#/dev51a648b07
Very good news, because the approach using a build phase has a big problem: code signing happens after all phases ran. So, before that new setting was introduced it could happen that you copied unsigned versions of your libs to the app bundle, which failed the application build, because the app could not be signed.&lt;/p&gt;

&lt;h1 id=&quot;potential-gains-from-switching-to-from-dynamic-to-static-libsframeworks&quot;&gt;Potential Gains from switching to From Dynamic to Static Libs/Frameworks&lt;/h1&gt;
&lt;p&gt;In an example using 27 frameworks, &lt;a href=&quot;https://medium.com/@acecilia/static-vs-dynamic-frameworks-in-swift-an-in-depth-analysis-ff61a77eec65&quot;&gt;this dev&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Reduced app size 14.55%&lt;/strong&gt;. They theorized this was due to the compiler being able to remove unused symbols which is not possible when using dynamic frameworks, and linked this &lt;a href=&quot;https://github.com/ReactiveX/RxSwift/pull/1960&quot;&gt;heated exchange&lt;/a&gt; for reference.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reduced first-launch load time by about 37.5%&lt;/strong&gt;. Subsequent launches were comparable thanks to the dyld cache.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Though the first-launch speed gains are worth pursuing, the size gains should only affect Swift libraries/frameworks since an Objective-C static library aught to be passed to the linker with the -ObjC option specified which “Loads all members of static archive libraries that implement an Objective-C class or category” since one of ObjC’s strengths/weaknesses is that it loads the entire symbol table and you can send any message to any object.&lt;/p&gt;

&lt;p&gt;From &lt;a href=&quot;https://stackoverflow.com/questions/2567498/objective-c-categories-in-static-library&quot;&gt;https://stackoverflow.com/questions/2567498/objective-c-categories-in-static-library&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;To resolve this issue, the static library should pass the -ObjC option to the linker. This flag causes the linker to load every object file in the library that defines an Objective-C class or category. While this option will typically result in a larger executable (due to additional object code loaded into the application), it will allow the successful creation of effective Objective-C static libraries that contain categories on existing classes.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">Files, Directories, Packages, Bundles and Frameworks: A package is any directory that the Finder presents to the user as if it were a single file. Finder considers a directory to be a package if any of the following conditions are true: The directory has a known filename extension: .app, .bundle, .framework, .plugin, .kext, and so on. The directory has an extension that some other application claims represents a package type; see Document Packages. The directory has its package bit set. A bundle is type of package with a standardized hierarchical structure that holds executable code and the resources used by that code. Apps and frameworks are examples of bundles.</summary></entry><entry><title type="html">Using launchd instead of cron</title><link href="http://localhost:4000/2020/04/06/using-launchd-instead-of-cron.html" rel="alternate" type="text/html" title="Using launchd instead of cron" /><published>2020-04-06T14:42:00-07:00</published><updated>2020-04-06T14:42:00-07:00</updated><id>http://localhost:4000/2020/04/06/using-launchd-instead-of-cron</id><content type="html" xml:base="http://localhost:4000/2020/04/06/using-launchd-instead-of-cron.html">&lt;p&gt;Create a plist in &lt;code class=&quot;highlighter-rouge&quot;&gt;/Users/scottmccoy/Library/LaunchAgents&lt;/code&gt;. Make sure to use full paths to your scripts/log files.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;plist&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Label&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;free_up_disk_space.command&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;ProgramArguments&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/Users/scottmccoy/free_up_disk_space.command&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;RunAtLoad&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;false/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;StandardErrorPath&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/Users/scottmccoy/script_logs/free_up_disk_space.err&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;StandardOutPath&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/Users/scottmccoy/script_logs/free_up_disk_space.log&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;StartCalendarInterval&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Hour&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;23&lt;span class=&quot;nt&quot;&gt;&amp;lt;/integer&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Minute&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;50&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plist&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Activate/Deactivate it like so:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;launchctl load free_up_disk_space.plist
launchctl unload free_up_disk_space.plist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Debug it by having it run every 20 seconds with  &lt;code class=&quot;highlighter-rouge&quot;&gt;StartInterval&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;key&amp;gt;StartInterval&amp;lt;/key&amp;gt;
&amp;lt;integer&amp;gt;20&amp;lt;/integer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In Console.app, watch the System Log for issues starting the script and watch the LaunchAgent’s log files for issues running it.&lt;/p&gt;

&lt;p&gt;Once you’re satisfied with its stability, I reccomend switching to &lt;code class=&quot;highlighter-rouge&quot;&gt;StartCalendarInterval&lt;/code&gt;. If the machine goes offline,  &lt;code class=&quot;highlighter-rouge&quot;&gt;StartInterval&lt;/code&gt; will run all missed executions of the script at re-launch.&lt;/p&gt;</content><author><name></name></author><summary type="html">Create a plist in /Users/scottmccoy/Library/LaunchAgents. Make sure to use full paths to your scripts/log files.</summary></entry><entry><title type="html">Ssh Multiple Github Logins</title><link href="http://localhost:4000/2020/03/27/ssh-multiple-github-logins.html" rel="alternate" type="text/html" title="Ssh Multiple Github Logins" /><published>2020-03-27T17:54:47-07:00</published><updated>2020-03-27T17:54:47-07:00</updated><id>http://localhost:4000/2020/03/27/ssh-multiple-github-logins</id><content type="html" xml:base="http://localhost:4000/2020/03/27/ssh-multiple-github-logins.html">&lt;p&gt;To simplify access on github it’s a great idea to use ssh keys for authentication. To add one, click on your user, then settings, then SSH and GPG Keys, or just go to https://github.com/settings/keys.
However, Github does not support multiple accounts sharing the same ssh key. One way to get around this is to create multiple entries in your ssh config file:&lt;/p&gt;

&lt;p&gt;~/.ssh/config&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#Vrtcal Github Enterprise account
Host github.vrtcal.com
HostName github.vrtcal.com
User git
IdentityFile ~/.ssh/id_rsa

#personal account
Host scotthmccoy-github
HostName github.com
Port 22
User git
IdentityFile ~/.ssh/id_rsa

#vrtcalsdkdev account
Host vrtcalsdkdev-github
HostName github.com
Port 22
User git
IdentityFile ~/.ssh/id_rsa_vrtcalsdkdev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Test the connection on each account:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scotts-mbp:ios-sdk scottmccoy$ ssh -T git@vrtcalsdkdev-github
Hi vrtcalsdkdev! You've successfully authenticated, but GitHub does not provide shell access.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scotts-mbp:ios-sdk scottmccoy$ ssh -T git@scotthmccoy-github
Hi scotthmccoy! You've successfully authenticated, but GitHub does not provide shell access.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then refer to the repo like so:
&lt;img src=&quot;http://localhost:4000/images/multiple_ssh_github.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>Scott McCoy</name></author><summary type="html">To simplify access on github it’s a great idea to use ssh keys for authentication. To add one, click on your user, then settings, then SSH and GPG Keys, or just go to https://github.com/settings/keys. However, Github does not support multiple accounts sharing the same ssh key. One way to get around this is to create multiple entries in your ssh config file:</summary></entry><entry><title type="html">free_disk_space.command</title><link href="http://localhost:4000/2020/03/26/freediskspacecommand.html" rel="alternate" type="text/html" title="free_disk_space.command" /><published>2020-03-26T17:11:00-07:00</published><updated>2020-03-26T17:11:00-07:00</updated><id>http://localhost:4000/2020/03/26/freediskspacecommand</id><content type="html" xml:base="http://localhost:4000/2020/03/26/freediskspacecommand.html">&lt;p&gt;Sometimes when installing new versions of software, the path that bash has saved gets corrupted. Running the hash command on that command can fix it, or just running hash -r&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[lunchvote@server /]$ node
-bash: /usr/local/bin/node: No such file or directory
hash node
[lunchvote@server /]$ node --version
v10.18.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Scott McCoy</name></author><summary type="html">Sometimes when installing new versions of software, the path that bash has saved gets corrupted. Running the hash command on that command can fix it, or just running hash -r</summary></entry><entry><title type="html">CentOS 7 - Unblock a port</title><link href="http://localhost:4000/2020/02/08/centos-7-unblock-port.html" rel="alternate" type="text/html" title="CentOS 7 - Unblock a port" /><published>2020-02-08T15:31:00-08:00</published><updated>2020-02-08T15:31:00-08:00</updated><id>http://localhost:4000/2020/02/08/centos-7-unblock-port</id><content type="html" xml:base="http://localhost:4000/2020/02/08/centos-7-unblock-port.html">&lt;p&gt;To unblock a port normally you’d use iptables which firewall-cmd is a wrapper for:&lt;br /&gt;&lt;br /&gt;iptables -I INPUT -p tcp –dport 12345 –syn -j ACCEPT&lt;br /&gt;service iptables save&lt;/p&gt;</content><author><name>Scott McCoy</name></author><summary type="html">To unblock a port normally you’d use iptables which firewall-cmd is a wrapper for:iptables -I INPUT -p tcp –dport 12345 –syn -j ACCEPTservice iptables save</summary></entry><entry><title type="html">Use lsof to see what processes are listening on which ports</title><link href="http://localhost:4000/2020/02/08/lsof-to-see-what-processes-are.html" rel="alternate" type="text/html" title="Use lsof to see what processes are listening on which ports" /><published>2020-02-08T15:19:00-08:00</published><updated>2020-02-08T15:19:00-08:00</updated><id>http://localhost:4000/2020/02/08/lsof-to-see-what-processes-are</id><content type="html" xml:base="http://localhost:4000/2020/02/08/lsof-to-see-what-processes-are.html">&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;I learned a bit about how to see what’s listening. If it doesn’t say * in the rightmost column, the listed host is the only one with access. In this example, node is only accessible &lt;em&gt;from&lt;/em&gt; localhost.&lt;br /&gt;&lt;br /&gt;sudo lsof -i -P -n&lt;/td&gt;
      &lt;td&gt;grep LISTEN&lt;br /&gt;&lt;br /&gt;systemd      1      root   29u  IPv4   85062376      0t0  TCP *:111 (LISTEN)&lt;br /&gt;httpd      119      root    4u  IPv6   85063110      0t0  TCP *:80 (LISTEN)&lt;br /&gt;sendmail   180      root    4u  IPv4   85063338      0t0  TCP 127.0.0.1:25 (LISTEN)&lt;br /&gt;rpcbind    707       rpc    4u  IPv4   85062376      0t0  TCP *:111 (LISTEN)&lt;br /&gt;rpcbind    707       rpc   11u  IPv6   93778193      0t0  TCP *:111 (LISTEN)&lt;br /&gt;httpd     5967    apache    4u  IPv6   85063110      0t0  TCP *:80 (LISTEN)&lt;br /&gt;httpd     6058    apache    4u  IPv6   85063110      0t0  TCP *:80 (LISTEN)&lt;br /&gt;httpd     6059    apache    4u  IPv6   85063110      0t0  TCP *:80 (LISTEN)&lt;br /&gt;httpd     7369    apache    4u  IPv6   85063110      0t0  TCP *:80 (LISTEN)&lt;br /&gt;httpd     8282    apache    4u  IPv6   85063110      0t0  TCP *:80 (LISTEN)&lt;br /&gt;node     10934 lunchvote   14u  IPv4 1986748894      0t0  TCP 127.0.0.1:5858 (LISTEN)&lt;br /&gt;node     10934 lunchvote   18u  IPv4 1986749280      0t0  TCP 127.0.0.1:3001 (LISTEN)&lt;br /&gt;sshd     10984      root    3u  IPv4 1989274030      0t0  TCP *:22 (LISTEN)&lt;br /&gt;sshd     10984      root    4u  IPv6 1989274032      0t0  TCP *:22 (LISTEN)&lt;br /&gt;&amp;lt;div&amp;gt;&lt;br /&gt;&amp;lt;/div&amp;gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>Scott McCoy</name></author><summary type="html">I learned a bit about how to see what’s listening. If it doesn’t say * in the rightmost column, the listed host is the only one with access. In this example, node is only accessible from localhost.sudo lsof -i -P -n grep LISTENsystemd      1      root   29u  IPv4   85062376      0t0  TCP *:111 (LISTEN)httpd      119      root    4u  IPv6   85063110      0t0  TCP *:80 (LISTEN)sendmail   180      root    4u  IPv4   85063338      0t0  TCP 127.0.0.1:25 (LISTEN)rpcbind    707       rpc    4u  IPv4   85062376      0t0  TCP *:111 (LISTEN)rpcbind    707       rpc   11u  IPv6   93778193      0t0  TCP *:111 (LISTEN)httpd     5967    apache    4u  IPv6   85063110      0t0  TCP *:80 (LISTEN)httpd     6058    apache    4u  IPv6   85063110      0t0  TCP *:80 (LISTEN)httpd     6059    apache    4u  IPv6   85063110      0t0  TCP *:80 (LISTEN)httpd     7369    apache    4u  IPv6   85063110      0t0  TCP *:80 (LISTEN)httpd     8282    apache    4u  IPv6   85063110      0t0  TCP *:80 (LISTEN)node     10934 lunchvote   14u  IPv4 1986748894      0t0  TCP 127.0.0.1:5858 (LISTEN)node     10934 lunchvote   18u  IPv4 1986749280      0t0  TCP 127.0.0.1:3001 (LISTEN)sshd     10984      root    3u  IPv4 1989274030      0t0  TCP *:22 (LISTEN)sshd     10984      root    4u  IPv6 1989274032      0t0  TCP *:22 (LISTEN)&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;</summary></entry><entry><title type="html">Fix corrupted path with hash command</title><link href="http://localhost:4000/2020/01/27/hash-command.html" rel="alternate" type="text/html" title="Fix corrupted path with hash command" /><published>2020-01-27T14:03:00-08:00</published><updated>2020-01-27T14:03:00-08:00</updated><id>http://localhost:4000/2020/01/27/hash-command</id><content type="html" xml:base="http://localhost:4000/2020/01/27/hash-command.html">&lt;p&gt;Sometimes when installing new versions of software, the path that bash has saved gets corrupted. Running the hash command on that command can fix it, or just running hash -r&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[lunchvote@server /]$ node
-bash: /usr/local/bin/node: No such file or directory
hash node
[lunchvote@server /]$ node --version
v10.18.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Scott McCoy</name></author><summary type="html">Sometimes when installing new versions of software, the path that bash has saved gets corrupted. Running the hash command on that command can fix it, or just running hash -r</summary></entry><entry><title type="html">Swift - Array of Generics of mixed types (Don’t!!)</title><link href="http://localhost:4000/2020/01/14/swift-array-of-generics-of-mixed-types.html" rel="alternate" type="text/html" title="Swift - Array of Generics of mixed types (Don't!!)" /><published>2020-01-14T12:03:00-08:00</published><updated>2020-01-14T12:03:00-08:00</updated><id>http://localhost:4000/2020/01/14/swift-array-of-generics-of-mixed-types</id><content type="html" xml:base="http://localhost:4000/2020/01/14/swift-array-of-generics-of-mixed-types.html">&lt;p&gt;Most common data formats (Json, Plist, XML) support arrays of mixed types like: [“foo”, 1, {“a”:3}]&lt;br /&gt;&lt;br /&gt;I often find myself wanting to make a wrapper that provides functionality like CustomStringConvertible, serialization to UserDefaults and so forth and then make an array of it:&lt;br /&gt;&lt;br /&gt;let arr = &lt;a href=&quot;&quot;&gt;MyClass&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;But I want to be able to tell what the instance of MyClass is wrapping, so I want MyClass to be generic:&lt;br /&gt;&lt;br /&gt;let firstElem = MyClass(1)&lt;br /&gt;let secondElem = MyClass(“Foo”)&lt;br /&gt;&lt;br /&gt;let arr = [firstElem, secondElem]&lt;br /&gt;&lt;br /&gt;But this results in “Heterogeneous collection literal could only be inferred to ‘[Any]’; add explicit type annotation if this is intentional” since firstElem is of type MyClass&amp;lt;Int&amp;gt; and secondElem is of type MyClass&amp;lt;String&amp;gt;.&lt;string&gt;&amp;nbsp;&lt;/string&gt;&lt;br /&gt;&lt;br /&gt;Making it an array of MyClass also doesn’t work:&lt;br /&gt;let arr:[MyClass] = [firstElem, secondElem] -&amp;gt; “Cannot convert value of type ‘MyClass&lt;int&gt;' to expected element type 'MyClass'&quot;&quot;&lt;/int&gt;&lt;br /&gt;&lt;br /&gt;The compiler treats them as completely different data types!&lt;br /&gt;&lt;br /&gt;So what are some actual solutions?&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;1. Make an array of your class type but make the type parameter Any:&lt;br /&gt;&lt;br /&gt;let firstElem:MyClass&lt;any&gt; = MyClass(1)&lt;/any&gt;&lt;br /&gt;let secondElem:MyClass&lt;any&gt; = MyClass(&quot;Foo&quot;)&lt;/any&gt;&lt;br /&gt;arr:[MyClass&lt;any&gt;] = [&lt;/any&gt;&lt;br /&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;firstElem,&lt;br /&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;secondElem&lt;br /&gt;]&lt;br /&gt;&lt;br /&gt;Note that this wipes out the utility of having MyClass even &lt;em&gt;be&lt;/em&gt; generic since instances of it are now explicitly MyClass&amp;lt;Any&amp;gt;rather than a &lt;int&gt;&lt;int&gt;&lt;string&gt;&lt;string&gt;MyClass&amp;lt;Int&amp;gt; and secondElem and MyClass&amp;lt;String&amp;gt;.&lt;/string&gt;&lt;/string&gt;&lt;/int&gt;&lt;/int&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;2. Make an array of Any:&lt;br /&gt;&lt;br /&gt;let arr:[Any] = [firstElem, secondElem]&lt;br /&gt;&lt;br /&gt;We get the benefits of generics, but the risk of an Any array.&lt;br /&gt;&lt;br /&gt;Note that it’s tempting to try and hide the array inside a container and then gate access to it with a func:&lt;br /&gt;&lt;br /&gt;func add(item:MyClass) {&lt;br /&gt;  &lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;But this gets you a “Reference to generic type ‘MyClass’ requires arguments in &amp;lt;…&amp;gt;”“&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;3. Create a protocol MyProtocol which MyClass conforms to and then make a [MyProtocol] array. This is a little better than the Any array approach in #2 since you can decide which classes implement the protocol, so you get &lt;em&gt;some&lt;/em&gt; type checking.&lt;br /&gt;&lt;br /&gt;It’s tempting to add an associated type to the protocol so you know something about what’s in the array, but Protocols with associated types have the same effective restrictions that Generics do and for the same reasons:&lt;br /&gt;&lt;br /&gt;protocol MyProtocol {&lt;br /&gt;    associatedtype MyType&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;“Protocol ‘SettingProtocol’ can only be used as a generic constraint because it has Self or associated type requirements”.&lt;br /&gt;&lt;br /&gt;So why not just have an abstract superclass that you can actually put some logic into instead of having to deal with the unreliable nature of default implementations of functions on your protocol?&lt;br /&gt;&lt;br /&gt;It’s also good to know that MyProtocol can’t have Self requirements (like Equatable does) if you want to have it be the type of an array. This keeps you from making an array of Equatable which makes sense since you can equate any 2 Doubles, but not a Double and a String. Big Nerd Ranch goes into this in a little more depth: https://www.bignerdranch.com/blog/why-associated-type-requirements-become-generic-constraints/&lt;br /&gt;&lt;br /&gt;3. The Type Erasure Pattern&lt;br /&gt;&lt;a href=&quot;https://www.bignerdranch.com/blog/breaking-down-type-erasure-in-swift/&quot;&gt;https://www.bignerdranch.com/blog/breaking-down-type-erasure-in-swift/&lt;/a&gt;&lt;br /&gt;The Type Erasure Pattern is a solution to a &lt;em&gt;different&lt;/em&gt; problem. Instead of letting you make an array of different types, it allows you to make an array of different classes of objects that conform to the same protocol with the &lt;i&gt;same&lt;/i&gt; associated type. So it won’t let you fake your way to [1, “2”, Dictionary] but it will let you effectively make something like [IntHandler(1), DifferentKindOfIntHandler(1), VeryDifferentIntHandler(1)].&lt;br /&gt;&lt;br /&gt;Since Type Erasure Pattern essentially substitutes a class for the protocol, to me this seems functionally equivalent to making an abstract generic class MyClass&lt;type&gt; and then making an array of MyClass&lt;int&gt; but with extra steps. The payoff for those steps is that you then get to effectively use a protocol instead of a class which can be a big help in a complex project, but YAGNI, probably.&lt;/int&gt;&lt;/type&gt;&lt;br /&gt;&lt;br /&gt;Note: Type Erasure is a CS term that in swift means “use generics”, and the Type Erasure Pattern is a particular software design pattern relying heavily on the use of generics.&lt;br /&gt;&lt;br /&gt;4. Enums with associated values&lt;br /&gt;&lt;br /&gt;From https://github.com/VinceBurn/SwiftyPlist/blob/master/Pod/Classes/Plist.swift:&lt;br /&gt;&lt;br /&gt;    enum EntityType {&lt;br /&gt;        case string(String)&lt;br /&gt;        case number(NSNumber)&lt;br /&gt;        case date(Date)&lt;br /&gt;        case data(Data)&lt;br /&gt;        case array([Plist])&lt;br /&gt;        case dictionary([String : Plist])&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;let arr = [EntityType.string(“Foo”), EntityType.date(Date())]&lt;br /&gt;&lt;br /&gt;Interestingly, Enums With Associated Values are how Optionals work in Swift - the compiler creates an enum with the associated value of YourType: https://medium.com/ios-os-x-development/swift-optionals-78dafaa53f3&lt;br /&gt;&lt;br /&gt;Writing to an enum with an associated type is &lt;i&gt;most&lt;/i&gt; elegant but getting a primitive value back out from one requires a lot of awful switch case code. My impulse was to immediately try to encapsulate the accessor code away behind a StringSetting or IntSetting class that knows exactly what data type it’s managing and can expose a primitive property. Which brings me back around to my original idea…&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;5. Just make an abstract class with very limited functionality and make subclasses that explicitly expose a primitive of the the type they handle:&lt;br /&gt;&lt;br /&gt;let arr:[AbstractSetting] = [StringSetting(“Foo”), IntSetting(1)]&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name>Scott McCoy</name></author><summary type="html">Most common data formats (Json, Plist, XML) support arrays of mixed types like: [“foo”, 1, {“a”:3}]I often find myself wanting to make a wrapper that provides functionality like CustomStringConvertible, serialization to UserDefaults and so forth and then make an array of it:let arr = MyClassBut I want to be able to tell what the instance of MyClass is wrapping, so I want MyClass to be generic:let firstElem = MyClass(1)let secondElem = MyClass(“Foo”)let arr = [firstElem, secondElem]But this results in “Heterogeneous collection literal could only be inferred to ‘[Any]’; add explicit type annotation if this is intentional” since firstElem is of type MyClass&amp;lt;Int&amp;gt; and secondElem is of type MyClass&amp;lt;String&amp;gt;.&amp;nbsp;Making it an array of MyClass also doesn’t work:let arr:[MyClass] = [firstElem, secondElem] -&amp;gt; “Cannot convert value of type ‘MyClass' to expected element type 'MyClass'&quot;&quot;The compiler treats them as completely different data types!So what are some actual solutions?1. Make an array of your class type but make the type parameter Any:let firstElem:MyClass = MyClass(1)let secondElem:MyClass = MyClass(&quot;Foo&quot;)arr:[MyClass] = [ firstElem, secondElem]Note that this wipes out the utility of having MyClass even be generic since instances of it are now explicitly MyClass&amp;lt;Any&amp;gt;rather than a MyClass&amp;lt;Int&amp;gt; and secondElem and MyClass&amp;lt;String&amp;gt;.2. Make an array of Any:let arr:[Any] = [firstElem, secondElem]We get the benefits of generics, but the risk of an Any array.Note that it’s tempting to try and hide the array inside a container and then gate access to it with a func:func add(item:MyClass) {  }But this gets you a “Reference to generic type ‘MyClass’ requires arguments in &amp;lt;…&amp;gt;”“3. Create a protocol MyProtocol which MyClass conforms to and then make a [MyProtocol] array. This is a little better than the Any array approach in #2 since you can decide which classes implement the protocol, so you get some type checking.It’s tempting to add an associated type to the protocol so you know something about what’s in the array, but Protocols with associated types have the same effective restrictions that Generics do and for the same reasons:protocol MyProtocol {    associatedtype MyType}“Protocol ‘SettingProtocol’ can only be used as a generic constraint because it has Self or associated type requirements”.So why not just have an abstract superclass that you can actually put some logic into instead of having to deal with the unreliable nature of default implementations of functions on your protocol?It’s also good to know that MyProtocol can’t have Self requirements (like Equatable does) if you want to have it be the type of an array. This keeps you from making an array of Equatable which makes sense since you can equate any 2 Doubles, but not a Double and a String. Big Nerd Ranch goes into this in a little more depth: https://www.bignerdranch.com/blog/why-associated-type-requirements-become-generic-constraints/3. The Type Erasure Patternhttps://www.bignerdranch.com/blog/breaking-down-type-erasure-in-swift/The Type Erasure Pattern is a solution to a different problem. Instead of letting you make an array of different types, it allows you to make an array of different classes of objects that conform to the same protocol with the same associated type. So it won’t let you fake your way to [1, “2”, Dictionary] but it will let you effectively make something like [IntHandler(1), DifferentKindOfIntHandler(1), VeryDifferentIntHandler(1)].Since Type Erasure Pattern essentially substitutes a class for the protocol, to me this seems functionally equivalent to making an abstract generic class MyClass and then making an array of MyClass but with extra steps. The payoff for those steps is that you then get to effectively use a protocol instead of a class which can be a big help in a complex project, but YAGNI, probably.Note: Type Erasure is a CS term that in swift means “use generics”, and the Type Erasure Pattern is a particular software design pattern relying heavily on the use of generics.4. Enums with associated valuesFrom https://github.com/VinceBurn/SwiftyPlist/blob/master/Pod/Classes/Plist.swift:    enum EntityType {        case string(String)        case number(NSNumber)        case date(Date)        case data(Data)        case array([Plist])        case dictionary([String : Plist])    }let arr = [EntityType.string(“Foo”), EntityType.date(Date())]Interestingly, Enums With Associated Values are how Optionals work in Swift - the compiler creates an enum with the associated value of YourType: https://medium.com/ios-os-x-development/swift-optionals-78dafaa53f3Writing to an enum with an associated type is most elegant but getting a primitive value back out from one requires a lot of awful switch case code. My impulse was to immediately try to encapsulate the accessor code away behind a StringSetting or IntSetting class that knows exactly what data type it’s managing and can expose a primitive property. Which brings me back around to my original idea…5. Just make an abstract class with very limited functionality and make subclasses that explicitly expose a primitive of the the type they handle:let arr:[AbstractSetting] = [StringSetting(“Foo”), IntSetting(1)]</summary></entry></feed>