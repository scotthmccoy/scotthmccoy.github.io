<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-07-25T14:59:37-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Scott McCoyâ€™s Developer Blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Crusty Array Compare</title><link href="http://localhost:4000/2020/07/25/crusty-array-compare.html" rel="alternate" type="text/html" title="Crusty Array Compare" /><published>2020-07-25T14:52:00-07:00</published><updated>2020-07-25T14:52:00-07:00</updated><id>http://localhost:4000/2020/07/25/crusty-array-compare</id><content type="html" xml:base="http://localhost:4000/2020/07/25/crusty-array-compare.html">This is an explanation for the nifty array compare implementation In the famous Crusty video at [38m and 38s](https://www.youtube.com/watch?v=xE5EcHuz52I#t=38m38s).

```
import Foundation
import XCTest

class ArrayCompareTest : XCTestCase {
    
    func arrayCompare&lt;T:Comparable&gt;(lhs:[T], rhs:[T]) -&gt; Bool {
        //This is an incredibly elegant if nearly inscrutable implementation of array match.
        
        //Use `zip` to merge the arrays into an array of tuples, then use `contains` *without an Element arg* to walk each element of the
        //zipped array and bail on the first non-match.
        return lhs.count == rhs.count &amp;&amp; !zip(lhs, rhs).contains {
            return $0 != $1
        }
    }
    
    func test() {
        XCTAssertTrue(arrayCompare(lhs:[1,2,3], rhs:[1,2,3]))
        XCTAssertFalse(arrayCompare(lhs:[1,2], rhs:[1,2,3]))
        XCTAssertFalse(arrayCompare(lhs:[1,2,3], rhs:[4,5,6]))
    }
}
```</content><author><name></name></author><summary type="html">This is an explanation for the nifty array compare implementation In the famous Crusty video at 38m and 38s.</summary></entry><entry><title type="html">Libraries &amp;amp; Frameworks</title><link href="http://localhost:4000/2020/07/17/libraries-frameworks.html" rel="alternate" type="text/html" title="Libraries &amp; Frameworks" /><published>2020-07-17T10:17:00-07:00</published><updated>2020-07-17T10:17:00-07:00</updated><id>http://localhost:4000/2020/07/17/libraries-frameworks</id><content type="html" xml:base="http://localhost:4000/2020/07/17/libraries-frameworks.html">## Files, Directories, Packages, Bundles and Frameworks
A `package` is any directory that the Finder presents to the user as if it were a single file.
Finder considers a directory to be a package if **any** of the following conditions are true:
1. The directory has a known filename extension: .app, .bundle, .framework, .plugin, .kext, and so on.
2. The directory has an extension that some other application claims represents a package type; see Document Packages.
3. The directory has its package bit set.
A `bundle` is type of `package` with a standardized hierarchical structure that holds executable code and the resources used by that code. Apps and `frameworks` are examples of `bundles`.


## Libraries vs Frameworks
* A `Library` is a collection of `object files` which are compiled .m files outputed by Clang as a .o file. (Author's note: presumably .swift files are compiled into .o files as well, but I haven't checked.) Like gcc, Clang is a compiler for the c-family of languages and is backed by the LLVM compiler infrastructure which stands for &quot;Low Level Virtual Machine&quot; despite it [not being a Virtual Machine](https://llvm.org/). `Object files` contain symbols for the linker to piece together into a `Mach-O Object File` (see below).  
* A `Framework` is a type of `bundle` containing a static or dynamic `library` and its resources.
* So, a `Framework` is a `bundle` (which is also a `package`) that contains a `library` which is a collection of `object files`.



## Mach-O Object Files &amp; Types
Distinct from an `object file` generated by clang, these `Macho-O Object Files` are the various [options for output from Xcode's linker phase](https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/MachOTopics/1-Articles/building_files.html) under Build Settings -&gt; Linking -&gt; Mach-O type. The most significant to this writing are `Static Library` and `Dynamic Library`, which inform how a Library or Framework may be linked by its consumer:

![]({{site.url}}/images/libraries_frameworks__mach_o_types.png)


## Static vs Dynamic

| | Static  | Dynamic |
|-|---------|---------|
| Library   | ![]({{site.url}}/images/libraries_frameworks__static_library.png) A **.a** file linked by the Static Linker at compile time. Must be shipped with header files. | ![]({{site.url}}/images/libraries_frameworks__dynamic_library.png) A **.dylib** file linked by the Dynamic Linker, or  `dyld` as-needed at runtime. The advantage is that libraries can be shared and don't take up space in each app. For example, all iOS and macOS system libraries are dynamic. The disadvantage is a slower launch/run time since the linking phase must occur during runtime. |
| Framework | ![]({{site.url}}/images/libraries_frameworks__static_framework.png) A `package` with the **.framework** extension containing a Static Library and its headers and other resources. Linked at compile time. | ![]({{site.url}}/images/libraries_frameworks__dynamic_framework.png) A `package` with the **.framework** extension containing a Dynamic Library and its headers and other resources. These must either be made available by the operating system (As all iOS and MacOS libraries/frameworks are) or be `embedded` into the App's bundle. |

## Identifying whether a framework is Static or Dynamic
[From](https://stackoverflow.com/questions/32591878/ios-is-it-a-static-or-a-dynamic-framework), you can use the `file` command:

A Static framework looks like this:
```
$ cd iOS/Crashlytics.framework
$ ls -l
total 9984
-rwxr-xr-x  1 andy  staff  4710656 11 Sep 17:11 Crashlytics
drwxr-xr-x  8 andy  staff      272 11 Sep 17:11 Headers
-rw-r--r--  1 andy  staff     1553 11 Sep 17:11 Info.plist
drwxr-xr-x  3 andy  staff      102 11 Sep 17:11 Modules
-rwxr-xr-x  1 andy  staff   146164 11 Sep 17:11 run
-rwxr-xr-x  1 andy  staff   241688 11 Sep 17:11 submit
$ file Crashlytics 
Crashlytics: Mach-O universal binary with 5 architectures
Crashlytics (for architecture armv7):   current ar archive random library
Crashlytics (for architecture armv7s):  current ar archive random library
Crashlytics (for architecture i386):    current ar archive random library
Crashlytics (for architecture x86_64):  current ar archive random library
Crashlytics (for architecture arm64):   current ar archive random library
```

A dynamic framework will look like this:
```
$ cd /Library/Frameworks/iTunesLibrary.framework/
$ ls -l
total 40
lrwxr-xr-x  1 root  wheel   24 10 Sep 17:38 Headers -&gt; Versions/Current/Headers
lrwxr-xr-x  1 root  wheel   24 10 Sep 17:38 Modules -&gt; Versions/Current/Modules
lrwxr-xr-x  1 root  wheel   26 10 Sep 17:38 Resources -&gt; Versions/Current/Resources
drwxr-xr-x  4 root  wheel  136 10 Sep 17:41 Versions
lrwxr-xr-x  1 root  wheel   22 10 Sep 17:38 XPCServices -&gt; Versions/A/XPCServices
lrwxr-xr-x  1 root  wheel   30 10 Sep 17:38 iTunesLibrary -&gt; Versions/Current/iTunesLibrary
$ file Versions/Current/iTunesLibrary 
Versions/Current/iTunesLibrary: Mach-O universal binary with 2 architectures
Versions/Current/iTunesLibrary (for architecture i386): Mach-O dynamically linked shared library i386
Versions/Current/iTunesLibrary (for architecture x86_64):   Mach-O 64-bit dynamically linked shared library x86_64
```

## Potential Gains from switching to From Dynamic to Static Libs/Frameworks
In an example using 27 frameworks, [this dev](https://medium.com/@acecilia/static-vs-dynamic-frameworks-in-swift-an-in-depth-analysis-ff61a77eec65):
1. **Reduced app size 14.55%**. They theorized this was due to the compiler being able to remove unused symbols which is not possible when using dynamic frameworks, and linked this [heated exchange](https://github.com/ReactiveX/RxSwift/pull/1960) for reference. 
2. **Reduced first-launch load time by about 37.5%**. Subsequent launches were comparable thanks to the dyld cache.

Though the first-launch speed gains are worth pursuing, the size gains should only affect Swift libraries/frameworks since an Objective-C static library aught to be passed to the linker with the -ObjC option specified which &quot;Loads all members of static archive libraries that implement an Objective-C class or category&quot; since one of ObjC's strengths/weaknesses is that it loads the entire symbol table and you can send any message to any object.

From [https://stackoverflow.com/questions/2567498/objective-c-categories-in-static-library](https://stackoverflow.com/questions/2567498/objective-c-categories-in-static-library)
&gt; To resolve this issue, the static library should pass the -ObjC option to the linker. This flag causes the linker to load every object file in the library that defines an Objective-C class or category. While this option will typically result in a larger executable (due to additional object code loaded into the application), it will allow the successful creation of effective Objective-C static libraries that contain categories on existing classes.

## Static vs Dynamic Frameworks and Swift
* It used to be the case that a framework that used Swift **had to** be dynamic, probably because the Swift libraries must be included in the framework package because of Swifts ABI instability prior to 5.0, and the fact that because they were system libraries, they were distributed as dylibs. 
* ABI Stability came with Swift 5 in Xcode 10.2 (March of 2019). This allowed the App Store to [thin app downloads](https://developer.apple.com/documentation/xcode-release-notes/swift-5-release-notes-for-xcode-10_2) of their Swift dylibs so long as the device is running iOS 12.2 or higher (and thus came with the Swift dylibs already installed). For prior iOS versions, the Swift dylibs would still have to be included in the app and downloaded by the user.
* Module Stability came in Swift 5.1 with Xcode 11.0 (September of 2019). This allowed true [backwards compatibility](https://www.donnywals.com/what-is-module-stability-in-swift-and-why-should-you-care/) with prior versions of Swift (at the time, only 5.0 and 5.0.1):
&gt; While ABI Stability allows programs written with different versions of Swift to exist in a shared runtime, Module Stability allows you to use frameworks compiled with different versions of Swift in a project that might use yet another version of Swift.
* You can now make a Swift static library. This [article](https://medium.com/onfido-tech/distributing-compiled-ios-swift-static-libraries-and-swift-static-frameworks-7fecc4f3d182) gives pretty detailed instructions, including what to do with the .swiftmodule. 

## Swift in a Framework Still Not a Good Idea
And it probably won't be until most major apps are on Swift 5.1+ and/or until iOS 12.1 dies.

If the framework uses Swift 5.1+, the host app uses Swift 5.0+, and the app targets iOS 12.2 or higher, you're golden. But, big apps tend to target very low iOS versions so a framework has to target 12.1 and lower (and thus include the Swift dylibs) to be of any real value to the world. Users on 12.1 and lower then have to download them, potentially twice if the framework and app have differing Swift versions (which may not even be compatible with each other if one of those is prior to 5.1). It's possible that app thinning doesn't extend to removing redundant versions of the same dylibs in which case the user would have to download them twice even if the Swift versions matched. This seems to be somewhat implied by &quot;Apps using bundled runtimes will however not get the benefits of App Store app thinning&quot; on [this page](https://swift.org/blog/abi-stability-and-apple/). 

So, we're effectively in the same boat we were in back in 2017 or 2018: Using swift in a framework has the potential for incompatibility with the host app and may increase download sizes by about 5 megs.  

Assuming that 1 major version of iOS is dropped from general support per year and with iOS 9 finally getting killed off this year (2020), 12.1 may not be killed until 2022 or 2023 at which point we can finally write a framework in Swift and be able to guarantee that it won't cause these kinds of integration problems for a major publisher. It's likely that prior to that enough major publishers will adopt Swift 5.1+ that the balance shifts and it becomes the rule rather than the exception that a framework will be written in Swift, but I don't think we're there yet.


## Modules and Modulemaps

This [Video from WWDC 2013](https://developer.apple.com/videos/play/wwdc2013/404/) explains it very well:  The `#include` preprocessor directive just pastes the included file right into the code. The `#import` directive does the same but it checks if it has been included before. Since both essentially do a copypaste job, it can result in chaos if you accidentally `#define` something that the include/import uses (like strong or readonly). It also results in a cross-product increase in code size in the eyes of the compiler since most of your files grow by the size of the common includes:

![]({{site.url}}/images/libraries_frameworks__non_scalable_includes.png)

A Pre-Compiled Header *partially* addresses this by allowing you to compile the common code **once**, but they result in namespace pollution - parts of your code get access to things they don't need like a Json fetcher having access to UIKit. 

### Modules
Modules address the fragility and scalability problem of headers by encapsulating the framework. To make use of them, you use the  `@import` directive which does a &quot;Semantic Import&quot;; it loads the complete semantic definition of the framework, and the compiler compiles it *once* as an isolated unit. As such, it doesn't need to parse the headers and local macros have no effect on the the Framework's API. The `@import` directive also eliminates the need to add the framework via &quot;Link Binary With Libraries&quot;; the compiler adds it for you! You can also import only some of the module. For example, `@import iAd.AdBannerView` will only import iAds' banner view and  `@import iAd.AdInterstitialView` will only import its interstitials. For known modules (ones with a modulemap visible to the compiler), `#inlcude` and `#import` are automatically mapped to the equivalent `@import`.

### Example modulemap
![]({{site.url}}/images/libraries_frameworks__modulemap_example.png)
This says 
1. &quot;Include UIKit.h&quot;, which is what you used to do anyways.
2. Next it says &quot;Anything that I import is a submodule&quot;
3. It also says &quot;Link against the UIKit Framework&quot;

### Modern Usage

In 2013, Xcode 5 added &quot;Enable Modules&quot; under Build Settings -&gt; Apple Clang - Language - Modules. This is set to Yes by default. Later in In 2014 with Xcode 6, support for user-defined modules was added, and &quot;Defines Module&quot; is now set to Yes by default. Thus, any modern user-defined framework project has a modulemap and can be imported via `@import`. [This article](http://blog.bjhomer.com/2015/05/defining-modules-for-custom-libraries.html) static modules, but I have not tested to see if it works or if the steps are still necessary.

### Mixing Swift &amp; Objective C in a Framework
This requires the use of a modulemap because bridging headers can't be used inside framework projects. [Example](https://medium.com/allatoneplace/challenges-building-a-swift-framework-d882867c97f9). 


## Defunct Topics

### Real versus Fake Frameworks
You can safely skip this section as this distinction is no longer of any real significance, Xcode having fixed this bug(?) in 2014 with the release of Xcode 6. 

In disallowing dynamically linked libraries for iOS Apple accidentally(?) removed static iOS framework creation functionality. Developers responded with the &quot;relocatable object file&quot; bundle hack, which tricked Xcode into building something that mostly resembles a framework, but is really a bundle. Alternately, with some tweaking of Xcode itself you could add the ability to create a static iOS framework back into Xcode using this plugin: [iOS-Universal-Framework](https://github.com/kstenerud/iOS-Universal-Framework). 

### Umbrella Framework
A framework that contains other frameworks. It is [possible but not officially supported on iOS](https://medium.com/@andreamiotz/ios-umbrella-framework-with-cocoapods-57d2d3c2daa9). Normally, when you create a framework which has a dependency, the app is responsible for adding that dependency along with your framework into the project.

### Code Signing a Framework
According to [this Stackoverflow post](https://stackoverflow.com/questions/30963294/creating-ios-osx-frameworks-is-it-necessary-to-codesign-them-before-distributin):
1. Xcode used to force you to code sign a framework when compiling it
2. Using `lipo` removes codesigning, which makes sense since it modifies the binary. 
3. Because of this, some of the most commonly distributed frameworks have *no* codesigning:
&gt;Binary framework distributions of well-known open source projects on Github are not codesigned. Command codesign -d -vvvv gives: &quot;code object is not signed at all&quot; on all of the binary iOS and OSX frameworks I used to explore. Some examples: ReactiveCocoa and Mantle, Realm, PromiseKit.
4. As of Xcode 9.4 (May 2018), the IDE will ask you to disable code signing for iOS Cocoa Touch Frameworks. Apple now says it is not recommended that you code sign your .framework.

I don't remember ever coming accross code signing issues with frameworks, probably because the framework projects I've worked on always used `lipo` to alter the architecture slices in the binary before shipping.


## Cocoapods
By default, Cocoapods compiles all your pods into a big static library.  Prior to March 2019, Swift could not support static libraries because of Swift's ABI instability - the swift dylibs had to be included in th framework, forcing it to be a dynamic framework. Cocoapods thus offered the `use_frameworks!` directive which tells it to use dynamic frameworks 
instead of making a big static library. According to [Cocoapod's 0.36 Release Notes](https://blog.cocoapods.org/CocoaPods-0.36/),
&gt;This is an all or nothing approach per integrated targets, because we can't ensure to properly build frameworks, whose transitive dependencies are static libraries.

However with with the ABI Stability offered by Swift 5 in Xcode 10.2 (March of 2019), swift static libraries finally became possible, and Cocoapods 1.5.0 (April 2019) offered `use_modular_headers!` instead. 
&gt;In this release, you will be able to opt into stricter header search paths (and module map generation for Objective-C pods). As a pod author, you can add 'DEFINES_MODULE' =&gt; 'YES' to your pod_target_xcconfig. Alternatively, in your Podfile you can add use_modular_headers! to enable the stricter search paths and module map generation for all of your pods, or you can add :modular_headers =&gt; true to a single pod declaration to enable for only that pod.

### MoPub's Cocoapod

According to [this](http://onebigfunction.com/ios/2015/12/31/mopub-mo-problems/), using MoPub's Cocoapod in a swift project seems to require either adding MoPub to your bridging header using `use_frameworks!`. The author laments that there's not a way to configure your Podfile such that `use_frameworks!` can be applied on a case-by-case basis instead of to your whole project. My guess is because MoPub is in the akward postion of wanting to support *all* of the following:

1. A source distribution
2. Compilation as a framework
3. Swift apps that don't want to use a bridging header
4. Objective-C Apps that don't want any Swift

It seems like an oversite for such a well-established company to just *imply* that you should use `use_frameworks!`, not explain why and end the conversation there but given that their own [Canary project](https://github.com/mopub/mopub-ios-sdk/tree/master/Canary) has them using it, maybe it's just something they're not super aware of. 

### pod_target_xcconfig
This is where you can add 'DEFINES_MODULE' =&gt; 'YES'. Documented [here](https://guides.cocoapods.org/syntax/podspec.html#pod_target_xcconfig). According to [this](https://stackoverflow.com/questions/51227921/is-there-any-downside-to-setting-defines-module-yes-in-my-podspec) there's no real downside for doing so, but I tested it with a MoPub Adapter Pod that used MoPub as a dependency and it seemed like it caused MoPub to be included twice, so I had to leave it out.  

### frameworks
The `frameworks` directive in a podfile specifies [a list of system frameworks that the userâ€™s target needs to link against](https://guides.cocoapods.org/syntax/podspec.html#frameworks).

### weak_frameworks
The `frameworks` directive in a podfile specifies [a list of frameworks that the userâ€™s target needs to **weakly** link against](https://guides.cocoapods.org/syntax/podspec.html#frameworks). This means that the pod is written such that if the framework is not available it will still run.

[Example](https://stackoverflow.com/questions/23354840/what-does-weak-framework-mean-in-xcodes-build-settings):
&gt;For example, one might want to mark SpriteKit as optional, so the app could still run on an OS that doesn't have it (for example, anything older than 7.0).</content><author><name></name></author><summary type="html">Files, Directories, Packages, Bundles and Frameworks A package is any directory that the Finder presents to the user as if it were a single file. Finder considers a directory to be a package if any of the following conditions are true: The directory has a known filename extension: .app, .bundle, .framework, .plugin, .kext, and so on. The directory has an extension that some other application claims represents a package type; see Document Packages. The directory has its package bit set. A bundle is type of package with a standardized hierarchical structure that holds executable code and the resources used by that code. Apps and frameworks are examples of bundles.</summary></entry><entry><title type="html">Using launchd instead of cron</title><link href="http://localhost:4000/2020/04/06/using-launchd-instead-of-cron.html" rel="alternate" type="text/html" title="Using launchd instead of cron" /><published>2020-04-06T14:42:00-07:00</published><updated>2020-04-06T14:42:00-07:00</updated><id>http://localhost:4000/2020/04/06/using-launchd-instead-of-cron</id><content type="html" xml:base="http://localhost:4000/2020/04/06/using-launchd-instead-of-cron.html">Create a plist in `/Users/scottmccoy/Library/LaunchAgents`. Make sure to use full paths to your scripts/log files.

```
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
    &lt;key&gt;Label&lt;/key&gt;
    &lt;string&gt;free_up_disk_space.command&lt;/string&gt;
    &lt;key&gt;ProgramArguments&lt;/key&gt;
    &lt;array&gt;
        &lt;string&gt;/Users/scottmccoy/free_up_disk_space.command&lt;/string&gt;
    &lt;/array&gt;
    &lt;key&gt;RunAtLoad&lt;/key&gt;
    &lt;false/&gt;
    &lt;key&gt;StandardErrorPath&lt;/key&gt;
    &lt;string&gt;/Users/scottmccoy/script_logs/free_up_disk_space.err&lt;/string&gt;
    &lt;key&gt;StandardOutPath&lt;/key&gt;
    &lt;string&gt;/Users/scottmccoy/script_logs/free_up_disk_space.log&lt;/string&gt;
    &lt;key&gt;StartCalendarInterval&lt;/key&gt;
    &lt;dict&gt;
        &lt;key&gt;Hour&lt;/key&gt;
        &lt;integer&gt;23&lt;/integer&gt;
        &lt;key&gt;Minute&lt;/key&gt;
        &lt;string&gt;50&lt;/string&gt;
    &lt;/dict&gt;
&lt;/dict&gt;
&lt;/plist&gt;
```

Activate/Deactivate it like so:
```
launchctl load free_up_disk_space.plist
launchctl unload free_up_disk_space.plist
```


Debug it by having it run every 20 seconds with  `StartInterval`:
```
&lt;key&gt;StartInterval&lt;/key&gt;
&lt;integer&gt;20&lt;/integer&gt;
```

In Console.app, watch the System Log for issues starting the script and watch the LaunchAgent's log files for issues running it. 

Once you're satisfied with its stability, I reccomend switching to `StartCalendarInterval`. If the machine goes offline,  `StartInterval` will run all missed executions of the script at re-launch.</content><author><name></name></author><summary type="html">Create a plist in /Users/scottmccoy/Library/LaunchAgents. Make sure to use full paths to your scripts/log files.</summary></entry><entry><title type="html">Ssh Multiple Github Logins</title><link href="http://localhost:4000/2020/03/27/ssh-multiple-github-logins.html" rel="alternate" type="text/html" title="Ssh Multiple Github Logins" /><published>2020-03-27T17:54:47-07:00</published><updated>2020-03-27T17:54:47-07:00</updated><id>http://localhost:4000/2020/03/27/ssh-multiple-github-logins</id><content type="html" xml:base="http://localhost:4000/2020/03/27/ssh-multiple-github-logins.html">To simplify access on github itâ€™s a great idea to use ssh keys for authentication. To add one, click on your user, then settings, then SSH and GPG Keys, or just go to https://github.com/settings/keys.
However, Github does not support multiple accounts sharing the same ssh key. One way to get around this is to create multiple entries in your ssh config file:

~/.ssh/config

```
#Vrtcal Github Enterprise account
Host github.vrtcal.com
HostName github.vrtcal.com
User git
IdentityFile ~/.ssh/id_rsa

#personal account
Host scotthmccoy-github
HostName github.com
Port 22
User git
IdentityFile ~/.ssh/id_rsa

#vrtcalsdkdev account
Host vrtcalsdkdev-github
HostName github.com
Port 22
User git
IdentityFile ~/.ssh/id_rsa_vrtcalsdkdev
```

Test the connection on each account:
```
scotts-mbp:ios-sdk scottmccoy$ ssh -T git@vrtcalsdkdev-github
Hi vrtcalsdkdev! You've successfully authenticated, but GitHub does not provide shell access.
```

```
scotts-mbp:ios-sdk scottmccoy$ ssh -T git@scotthmccoy-github
Hi scotthmccoy! You've successfully authenticated, but GitHub does not provide shell access.
```


Then refer to the repo like so:
![]({{ site.url }}/images/multiple_ssh_github.png)</content><author><name>Scott McCoy</name></author><summary type="html">To simplify access on github itâ€™s a great idea to use ssh keys for authentication. To add one, click on your user, then settings, then SSH and GPG Keys, or just go to https://github.com/settings/keys. However, Github does not support multiple accounts sharing the same ssh key. One way to get around this is to create multiple entries in your ssh config file:</summary></entry><entry><title type="html">free_disk_space.command</title><link href="http://localhost:4000/2020/03/26/freediskspacecommand.html" rel="alternate" type="text/html" title="free_disk_space.command" /><published>2020-03-26T17:11:00-07:00</published><updated>2020-03-26T17:11:00-07:00</updated><id>http://localhost:4000/2020/03/26/freediskspacecommand</id><content type="html" xml:base="http://localhost:4000/2020/03/26/freediskspacecommand.html">Sometimes when installing new versions of software, the path that bash has saved gets corrupted. Running the hash command on that command can fix it, or just running hash -r


```
[lunchvote@server /]$ node
-bash: /usr/local/bin/node: No such file or directory
hash node
[lunchvote@server /]$ node --version
v10.18.1
```</content><author><name>Scott McCoy</name></author><summary type="html">Sometimes when installing new versions of software, the path that bash has saved gets corrupted. Running the hash command on that command can fix it, or just running hash -r</summary></entry><entry><title type="html">CentOS 7 - Unblock a port</title><link href="http://localhost:4000/2020/02/08/centos-7-unblock-port.html" rel="alternate" type="text/html" title="CentOS 7 - Unblock a port" /><published>2020-02-08T15:31:00-08:00</published><updated>2020-02-08T15:31:00-08:00</updated><id>http://localhost:4000/2020/02/08/centos-7-unblock-port</id><content type="html" xml:base="http://localhost:4000/2020/02/08/centos-7-unblock-port.html">To unblock a port normally you'd use iptables which firewall-cmd is a wrapper for:&lt;br /&gt;&lt;br /&gt;iptables -I INPUT -p tcp --dport 12345 --syn -j ACCEPT&lt;br /&gt;service iptables save</content><author><name>Scott McCoy</name></author><summary type="html">To unblock a port normally youâ€™d use iptables which firewall-cmd is a wrapper for:iptables -I INPUT -p tcp â€“dport 12345 â€“syn -j ACCEPTservice iptables save</summary></entry><entry><title type="html">Use lsof to see what processes are listening on which ports</title><link href="http://localhost:4000/2020/02/08/lsof-to-see-what-processes-are.html" rel="alternate" type="text/html" title="Use lsof to see what processes are listening on which ports" /><published>2020-02-08T15:19:00-08:00</published><updated>2020-02-08T15:19:00-08:00</updated><id>http://localhost:4000/2020/02/08/lsof-to-see-what-processes-are</id><content type="html" xml:base="http://localhost:4000/2020/02/08/lsof-to-see-what-processes-are.html">I learned a bit about how to see what's listening. If it doesn't say * in the rightmost column, the listed host is the only one with access. In this example, node is only accessible *from* localhost.&lt;br /&gt;&lt;br /&gt;sudo lsof -i -P -n | grep LISTEN&lt;br /&gt;&lt;br /&gt;systemd&amp;nbsp; &amp;nbsp; &amp;nbsp; 1&amp;nbsp; &amp;nbsp; &amp;nbsp; root&amp;nbsp; &amp;nbsp;29u&amp;nbsp; IPv4&amp;nbsp; &amp;nbsp;85062376&amp;nbsp; &amp;nbsp; &amp;nbsp; 0t0&amp;nbsp; TCP *:111 (LISTEN)&lt;br /&gt;httpd&amp;nbsp; &amp;nbsp; &amp;nbsp; 119&amp;nbsp; &amp;nbsp; &amp;nbsp; root&amp;nbsp; &amp;nbsp; 4u&amp;nbsp; IPv6&amp;nbsp; &amp;nbsp;85063110&amp;nbsp; &amp;nbsp; &amp;nbsp; 0t0&amp;nbsp; TCP *:80 (LISTEN)&lt;br /&gt;sendmail&amp;nbsp; &amp;nbsp;180&amp;nbsp; &amp;nbsp; &amp;nbsp; root&amp;nbsp; &amp;nbsp; 4u&amp;nbsp; IPv4&amp;nbsp; &amp;nbsp;85063338&amp;nbsp; &amp;nbsp; &amp;nbsp; 0t0&amp;nbsp; TCP 127.0.0.1:25 (LISTEN)&lt;br /&gt;rpcbind&amp;nbsp; &amp;nbsp; 707&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;rpc&amp;nbsp; &amp;nbsp; 4u&amp;nbsp; IPv4&amp;nbsp; &amp;nbsp;85062376&amp;nbsp; &amp;nbsp; &amp;nbsp; 0t0&amp;nbsp; TCP *:111 (LISTEN)&lt;br /&gt;rpcbind&amp;nbsp; &amp;nbsp; 707&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;rpc&amp;nbsp; &amp;nbsp;11u&amp;nbsp; IPv6&amp;nbsp; &amp;nbsp;93778193&amp;nbsp; &amp;nbsp; &amp;nbsp; 0t0&amp;nbsp; TCP *:111 (LISTEN)&lt;br /&gt;httpd&amp;nbsp; &amp;nbsp; &amp;nbsp;5967&amp;nbsp; &amp;nbsp; apache&amp;nbsp; &amp;nbsp; 4u&amp;nbsp; IPv6&amp;nbsp; &amp;nbsp;85063110&amp;nbsp; &amp;nbsp; &amp;nbsp; 0t0&amp;nbsp; TCP *:80 (LISTEN)&lt;br /&gt;httpd&amp;nbsp; &amp;nbsp; &amp;nbsp;6058&amp;nbsp; &amp;nbsp; apache&amp;nbsp; &amp;nbsp; 4u&amp;nbsp; IPv6&amp;nbsp; &amp;nbsp;85063110&amp;nbsp; &amp;nbsp; &amp;nbsp; 0t0&amp;nbsp; TCP *:80 (LISTEN)&lt;br /&gt;httpd&amp;nbsp; &amp;nbsp; &amp;nbsp;6059&amp;nbsp; &amp;nbsp; apache&amp;nbsp; &amp;nbsp; 4u&amp;nbsp; IPv6&amp;nbsp; &amp;nbsp;85063110&amp;nbsp; &amp;nbsp; &amp;nbsp; 0t0&amp;nbsp; TCP *:80 (LISTEN)&lt;br /&gt;httpd&amp;nbsp; &amp;nbsp; &amp;nbsp;7369&amp;nbsp; &amp;nbsp; apache&amp;nbsp; &amp;nbsp; 4u&amp;nbsp; IPv6&amp;nbsp; &amp;nbsp;85063110&amp;nbsp; &amp;nbsp; &amp;nbsp; 0t0&amp;nbsp; TCP *:80 (LISTEN)&lt;br /&gt;httpd&amp;nbsp; &amp;nbsp; &amp;nbsp;8282&amp;nbsp; &amp;nbsp; apache&amp;nbsp; &amp;nbsp; 4u&amp;nbsp; IPv6&amp;nbsp; &amp;nbsp;85063110&amp;nbsp; &amp;nbsp; &amp;nbsp; 0t0&amp;nbsp; TCP *:80 (LISTEN)&lt;br /&gt;node&amp;nbsp; &amp;nbsp; &amp;nbsp;10934 lunchvote&amp;nbsp; &amp;nbsp;14u&amp;nbsp; IPv4 1986748894&amp;nbsp; &amp;nbsp; &amp;nbsp; 0t0&amp;nbsp; TCP 127.0.0.1:5858 (LISTEN)&lt;br /&gt;node&amp;nbsp; &amp;nbsp; &amp;nbsp;10934 lunchvote&amp;nbsp; &amp;nbsp;18u&amp;nbsp; IPv4 1986749280&amp;nbsp; &amp;nbsp; &amp;nbsp; 0t0&amp;nbsp; TCP 127.0.0.1:3001 (LISTEN)&lt;br /&gt;sshd&amp;nbsp; &amp;nbsp; &amp;nbsp;10984&amp;nbsp; &amp;nbsp; &amp;nbsp; root&amp;nbsp; &amp;nbsp; 3u&amp;nbsp; IPv4 1989274030&amp;nbsp; &amp;nbsp; &amp;nbsp; 0t0&amp;nbsp; TCP *:22 (LISTEN)&lt;br /&gt;sshd&amp;nbsp; &amp;nbsp; &amp;nbsp;10984&amp;nbsp; &amp;nbsp; &amp;nbsp; root&amp;nbsp; &amp;nbsp; 4u&amp;nbsp; IPv6 1989274032&amp;nbsp; &amp;nbsp; &amp;nbsp; 0t0&amp;nbsp; TCP *:22 (LISTEN)&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content><author><name>Scott McCoy</name></author><summary type="html">I learned a bit about how to see whatâ€™s listening. If it doesnâ€™t say * in the rightmost column, the listed host is the only one with access. In this example, node is only accessible from localhost.sudo lsof -i -P -n grep LISTENsystemdÂ  Â  Â  1Â  Â  Â  rootÂ  Â 29uÂ  IPv4Â  Â 85062376Â  Â  Â  0t0Â  TCP *:111 (LISTEN)httpdÂ  Â  Â  119Â  Â  Â  rootÂ  Â  4uÂ  IPv6Â  Â 85063110Â  Â  Â  0t0Â  TCP *:80 (LISTEN)sendmailÂ  Â 180Â  Â  Â  rootÂ  Â  4uÂ  IPv4Â  Â 85063338Â  Â  Â  0t0Â  TCP 127.0.0.1:25 (LISTEN)rpcbindÂ  Â  707Â  Â  Â  Â rpcÂ  Â  4uÂ  IPv4Â  Â 85062376Â  Â  Â  0t0Â  TCP *:111 (LISTEN)rpcbindÂ  Â  707Â  Â  Â  Â rpcÂ  Â 11uÂ  IPv6Â  Â 93778193Â  Â  Â  0t0Â  TCP *:111 (LISTEN)httpdÂ  Â  Â 5967Â  Â  apacheÂ  Â  4uÂ  IPv6Â  Â 85063110Â  Â  Â  0t0Â  TCP *:80 (LISTEN)httpdÂ  Â  Â 6058Â  Â  apacheÂ  Â  4uÂ  IPv6Â  Â 85063110Â  Â  Â  0t0Â  TCP *:80 (LISTEN)httpdÂ  Â  Â 6059Â  Â  apacheÂ  Â  4uÂ  IPv6Â  Â 85063110Â  Â  Â  0t0Â  TCP *:80 (LISTEN)httpdÂ  Â  Â 7369Â  Â  apacheÂ  Â  4uÂ  IPv6Â  Â 85063110Â  Â  Â  0t0Â  TCP *:80 (LISTEN)httpdÂ  Â  Â 8282Â  Â  apacheÂ  Â  4uÂ  IPv6Â  Â 85063110Â  Â  Â  0t0Â  TCP *:80 (LISTEN)nodeÂ  Â  Â 10934 lunchvoteÂ  Â 14uÂ  IPv4 1986748894Â  Â  Â  0t0Â  TCP 127.0.0.1:5858 (LISTEN)nodeÂ  Â  Â 10934 lunchvoteÂ  Â 18uÂ  IPv4 1986749280Â  Â  Â  0t0Â  TCP 127.0.0.1:3001 (LISTEN)sshdÂ  Â  Â 10984Â  Â  Â  rootÂ  Â  3uÂ  IPv4 1989274030Â  Â  Â  0t0Â  TCP *:22 (LISTEN)sshdÂ  Â  Â 10984Â  Â  Â  rootÂ  Â  4uÂ  IPv6 1989274032Â  Â  Â  0t0Â  TCP *:22 (LISTEN)&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;</summary></entry><entry><title type="html">Fix corrupted path with hash command</title><link href="http://localhost:4000/2020/01/27/hash-command.html" rel="alternate" type="text/html" title="Fix corrupted path with hash command" /><published>2020-01-27T14:03:00-08:00</published><updated>2020-01-27T14:03:00-08:00</updated><id>http://localhost:4000/2020/01/27/hash-command</id><content type="html" xml:base="http://localhost:4000/2020/01/27/hash-command.html">Sometimes when installing new versions of software, the path that bash has saved gets corrupted. Running the hash command on that command can fix it, or just running hash -r


```
[lunchvote@server /]$ node
-bash: /usr/local/bin/node: No such file or directory
hash node
[lunchvote@server /]$ node --version
v10.18.1
```</content><author><name>Scott McCoy</name></author><summary type="html">Sometimes when installing new versions of software, the path that bash has saved gets corrupted. Running the hash command on that command can fix it, or just running hash -r</summary></entry><entry><title type="html">Swift - Arrays of Generics of Mixed Types, Why Not To Do That, and why Type Erasure is Not A Solution</title><link href="http://localhost:4000/2020/01/14/swift-array-of-generics-of-mixed-types.html" rel="alternate" type="text/html" title="Swift - Arrays of Generics of Mixed Types, Why Not To Do That, and why Type Erasure is Not A Solution" /><published>2020-01-14T12:03:00-08:00</published><updated>2020-01-14T12:03:00-08:00</updated><id>http://localhost:4000/2020/01/14/swift-array-of-generics-of-mixed-types</id><content type="html" xml:base="http://localhost:4000/2020/01/14/swift-array-of-generics-of-mixed-types.html">Most common data formats (Json, Plist, XML) support arrays of mixed types like: `[&quot;foo&quot;, 1, {&quot;a&quot;:3}]` and I often find myself wanting to mirror that in Swift. For example, I often find myself wanting to make a generic AppSetting class that can consume/represent any data type, wraps UserDefaults and provides functionality like CustomStringConvertible:

```
class AppSetting&lt;T&gt; {
    var data:T
    
    init(_ data:T) {
        self.data = data
    }
}
```

Unfortunately, once the generic class definition is resolved to a concrete type, say  `AppSetting&lt;Int&gt;` and `AppSetting&lt;String&gt;`, they're just as different from each other as an `Int` and a `String` are and you get the same &quot;Don't mix types&quot; errors if you try to put them into an array:

```
let firstElem = AppSetting(1)
let secondElem = AppSetting(&quot;Foo&quot;)
let arr = [firstElem, secondElem]
ðŸ›‘ Heterogeneous collection literal could only be inferred to '[Any]'; add explicit type annotation if this is intentional
```

## Non-Solutions

1. Making it an array of `AppSetting&lt;Any&gt;` doesn't work because that's *also* a distinct type:

    ```
    let firstElem = AppSetting(1)
    let secondElem = AppSetting(&quot;Foo&quot;)
    let arr:[AppSetting&lt;Any&gt;] = [firstElem, secondElem]
    ðŸ›‘ Cannot convert value of type 'AppSetting&lt;Int&gt;' to expected element type 'AppSetting'
    ```

2. Make the elements explicitly of type `AppSetting&lt;Any&gt;` compiles, but it wipes out the usefulness of generics. 
    ```
    let firstElem:AppSetting&lt;Any&gt; = AppSetting(1)
    let secondElem:AppSetting&lt;Any&gt; = AppSetting(&quot;Foo&quot;)
    let arr:[MyClass&lt;Any&gt;] = [firstElem, secondElem]
    ```

    This wipes out the utility of having MyClass be generic since elements of the array are now explicitly `MyClass&lt;Any&gt;` rather than `MyClass&lt;Int&gt;` or `MyClass&lt;String&gt;`. 

3. Making array of type  `Any` is arguably the most faithful mirror of the typeless JSON array we're trying to mimic, but we'd obviously like *some* kind of type checking:   
    ```
    let firstElem = AppSetting(1)
    let secondElem = AppSetting(&quot;Foo&quot;)
    let arr:[Any] = [firstElem, secondElem]
    ```

So what's the nost elegant way to get an array of mixed types, but with some type checking?


## Solutions

1. Create a dummy protocol `AppSettingProtocol` which `AppSetting` conforms to and then make a `[AppSettingProtocol]` array, essentially *obscuring* the `AppSetting&lt;T&gt;` type. 
    
    ```
    protocol AppSettingProtocol{}

    class AppSetting&lt;T&gt; : AppSettingProtocol {
        var data:T
        
        init(_ data:T) {
            self.data = data
        }
    }
     
    let firstElem = AppSetting(1)
    let secondElem = AppSetting(&quot;Foo&quot;)
    let arr:[AppSettingProtocol] = [firstElem, secondElem]
    ```

    This is sort of like having an abstract superclass.

    It's tempting to add an `Associated Type` to the protocol so you know something about what's in the array, but Protocols with associated types have the same effective restrictions that Generics do and for many of the same reasons: 
    
    ```
    protocol MyProtocol {
        associatedtype MyType    
    }
    &quot;Protocol 'SettingProtocol' can only be used as a generic constraint because it has Self or associated type requirements&quot;
    ```

    It's also good to know that MyProtocol can't have Self requirements (like Equatable does) if you want to have it be the type of an array. This keeps you from making an array of Equatable which makes sense since if you could, you could have an array of objects of mixed types that might not be Equatable with each *other*. For example, two Doubles are Equatable, but you  [Self requirements](https://www.bignerdranch.com/blog/why-associated-type-requirements-become-generic-constraints/) like this in a little more depth. 



4. Enums with Associated Values

    Example from [SwiftyPlist](https://github.com/VinceBurn/SwiftyPlist/blob/master/Pod/Classes/Plist.swift):

    ```
    enum EntityType {
        case string(String)
        case number(NSNumber)
        case date(Date)
        case data(Data)
        case array([Plist])
        case dictionary([String : Plist])
    }

    let arr = [EntityType.string(&quot;Foo&quot;), EntityType.date(Date())]
    ``` 

    As you can see, writing to an enum with an associated type is quite elegant. But getting a primitive value back out from one requires a lot of awful switch case code: 

    My impulse was to immediately try to encapsulate the accessor code away behind a StringSetting or IntSetting class that knows exactly what data type it's managing and can expose a primitive property. Which brings me back around to my original idea...


5. Just make an abstract class with very limited functionality and make subclasses that explicitly expose a primitive of the the type they handle:

    ```
    let arr:[AbstractSetting] = [StringSetting(&quot;Foo&quot;), IntSetting(1)]
    ```



## The Type Erasure Pattern
The Type Erasure Pattern is a solution to a *different* problem.

You create 3 classes - an Abstract Base which subclassed in order to bind the generic type constraint to our protocolâ€™s associated type, a Box, and a Public Wrapper. The 
[Big Nerd Ranch](https://www.bignerdranch.com/blog/breaking-down-type-erasure-in-swift) discusses this in depth.
The Type Erasure Pattern is a solution to a *different* problem. Instead of letting you make an array of *different* types, it allows you to make an array of *different class instances that conform to the same protocol* so long as they have the same *associated type*. So it won't let you fake your way to `[1, &quot;2&quot;, Dictionary]`, but it will let you make something like 
```
let arr:[AnyHandler&lt;Int&gt;] = [IntHandler(1), DifferentKindOfIntHandler(1), VeryDifferentIntHandler(1)]
```
Where AnyHandler conforms to 

Since the Type Erasure Pattern essentially substitutes a class for the protocol, to me this seems functionally equivalent to making an abstract generic `MyClass&lt;T&gt;` and then making an array of `MyClass&lt;Int&gt;` but with extra steps. The payoff for those steps is that you then get to effectively use a protocol instead of a class which can be a big help in a complex project, but YAGNI, probably.

Note: Type Erasure is a CS term that in *Swift* means &quot;use generics&quot;, and the Type Erasure *Pattern* is a particular software design pattern relying heavily on the use of generics.










When is the Type Erasure Pattern *Useful*?

```
protocol Identifiable {
    associatedtype ID
    var id: ID { get set }
}

struct Person: Identifiable {
    var id: String
}

struct Website: Identifiable {
    var id: URL
}

func compareThing1(_ thing1: Identifiable, against thing2: Identifiable) -&gt; Bool {
    return true
}

ðŸ›‘ protocol 'Identifiable' can only be used as a generic constraint because it has Self or associated type requirements
```
This makes sense, if we didn't have this compilation error we'd be able to make an array of all `Equatable`s or something equally maddening.



[This Guy](https://medium.com/capital-one-tech/an-alternative-to-type-erasure-for-generic-protocols-a9a48e96618a)'s approach to the associated type problem is to just not use associated types 

```
protocol Fetchable {
    associatedtype DataType
    func fetch(completionBlock: @escaping ([DataType]?) -&gt; Void)
}

protocol FetchableType {}

protocol Fetchable {
    func fetch(completionBlock: @escaping (FetchableType) -&gt; Void)
}

struct FlightBookingsWrapper: FetchableType {
    let bookings: [FlightBooking]?
}

struct HotelBookingsWrapper: FetchableType {
    let bookings: [HotelBooking]?
}

struct RentalBookingsWrapper: FetchableType {
    let bookings: [RentalBooking]?
}

struct FlightBookingFetcher: Fetchable {
    func fetch(completionBlock: @escaping (FetchableType) -&gt; Void) {
        completionBlock(
            FlightBookingsWrapper(bookings: [
                FlightBooking(identifier: &quot;VX-XUJURM&quot;,
                              startDate: Date.bookingDate(from: &quot;2017-11-12T10:30:00+0000&quot;),
                              endDate: Date.bookingDate(from: &quot;2017-11-16T09:00:00+0000&quot;),
                              flightNumber: &quot;VX-1511&quot;,
                              from: &quot;SFO&quot;,
                              to: &quot;SEA&quot;,
                              isRoundTrip: true)
                ]))
    }
}

struct HotelBookingFetcher: Fetchable {
    func fetch(completionBlock: @escaping (FetchableType) -&gt; Void) {
        completionBlock(
            HotelBookingsWrapper(bookings: [
                HotelBooking(identifier: &quot;MC-83027626&quot;,
                             startDate: Date.bookingDate(from: &quot;2017-11-12T00:00:00+0000&quot;),
                             endDate: Date.bookingDate(from: &quot;2017-11-16T00:00:00+0000&quot;),
                             roomNumber: 304)
                ]))
    }
}

struct RentalBookingFetcher: Fetchable {
    func fetch(completionBlock: @escaping (FetchableType) -&gt; Void) {
        completionBlock(
            RentalBookingsWrapper(bookings: [
                RentalBooking(identifier: &quot;ENT-2856847&quot;,
                              startDate: Date.bookingDate(from: &quot;2017-11-12T00:00:00+0000&quot;),
                              endDate: Date.bookingDate(from: &quot;2017-11-16T00:00:00+0000&quot;),
                              model: &quot;Fiesta&quot;,
                              make: &quot;Ford&quot;)
                ]))
    }
}

struct BookingCoordinator {
    public func fetch() {
        let fetchers: [Fetchable] = [FlightBookingFetcher(), HotelBookingFetcher(), RentalBookingFetcher()]
        for fetcher in fetchers {
            fetcher.fetch { (bookings) in
                print(bookings)
            }
        }
    }
}
```
This is honestly not bad, but I think the point of the Type Erasure Pattern is to create 3 new classes and then you can use *anything* that conforms to that protocol in that array,






The Crusty Video 

Instead of classes, make structs that implement protocols.

1. Protocols essentially give you multiple inheritance.
2. Structs are Value types - faster and more thread safe! 

Dave &amp; Crusty made the following:
1. Some Shape structs that implmented a Drawable protocol
2. A TestRenderer struct that implemented a Renderer protocol
3. An extension on CGContext so that it implements Renderer(!!!) 

```
protocol Drawable {
    func draw(renderer:Renderer)
}
```

The assertion is that protocols and Generics are much better than mocks for testability.

protocol extensions not only do not extend the contract explicit in the original protocol, they *require* you to implement 
In an extension protocol, you can create a default implementation. 


&gt; Mocks are inherently fragile; You have to couple testing code to the implementation details of the code under test.



Constrained extensions

You can make a protocol extension (with a nice default implementation!!) that only applies where an associated type is also something else.
Instead of having to apply an extension to a bunch of different classes, potentially infinite, you make the protocol extension opt into applying only when the associated type is also something else! 



A self requirement puts it in the homogeneous, statically dispatched world. But Diagram really needs a heterogeneous array of Drawables so we can put polygons and circles in the same array.



You want to use classes when copying or comparing instances doesn't make sense (Window)
Instance lifetime is tied to external effects. The compiler does lots of optimization on value types' lifetimes but a class sticks around.
When the class would be a &quot;sink&quot;; a write-only conduit to an external state.</content><author><name>Scott McCoy</name></author><summary type="html">Most common data formats (Json, Plist, XML) support arrays of mixed types like: [&quot;foo&quot;, 1, {&quot;a&quot;:3}] and I often find myself wanting to mirror that in Swift. For example, I often find myself wanting to make a generic AppSetting class that can consume/represent any data type, wraps UserDefaults and provides functionality like CustomStringConvertible:</summary></entry><entry><title type="html">TIL - Use of Selector or #selector now requires the function be @objc</title><link href="http://localhost:4000/2020/01/08/til-use-of-selector-or-selector-now.html" rel="alternate" type="text/html" title="TIL - Use of Selector or #selector now requires the function be @objc" /><published>2020-01-08T12:21:00-08:00</published><updated>2020-01-08T12:21:00-08:00</updated><id>http://localhost:4000/2020/01/08/til-use-of-selector-or-selector-now</id><content type="html" xml:base="http://localhost:4000/2020/01/08/til-use-of-selector-or-selector-now.html">That's it, that's the post.</content><author><name>Scott McCoy</name></author><summary type="html">Thatâ€™s it, thatâ€™s the post.</summary></entry></feed>