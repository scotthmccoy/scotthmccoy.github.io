<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-07-23T14:13:32-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Scott McCoy’s Developer Blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Libraries &amp;amp; Frameworks</title><link href="http://localhost:4000/2020/07/17/libraries-frameworks.html" rel="alternate" type="text/html" title="Libraries &amp; Frameworks" /><published>2020-07-17T10:17:00-07:00</published><updated>2020-07-17T10:17:00-07:00</updated><id>http://localhost:4000/2020/07/17/libraries-frameworks</id><content type="html" xml:base="http://localhost:4000/2020/07/17/libraries-frameworks.html">&lt;h2 id=&quot;files-directories-packages-bundles-and-frameworks&quot;&gt;Files, Directories, Packages, Bundles and Frameworks&lt;/h2&gt;
&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;package&lt;/code&gt; is any directory that the Finder presents to the user as if it were a single file.
Finder considers a directory to be a package if &lt;strong&gt;any&lt;/strong&gt; of the following conditions are true:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The directory has a known filename extension: .app, .bundle, .framework, .plugin, .kext, and so on.&lt;/li&gt;
  &lt;li&gt;The directory has an extension that some other application claims represents a package type; see Document Packages.&lt;/li&gt;
  &lt;li&gt;The directory has its package bit set.
A &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle&lt;/code&gt; is type of &lt;code class=&quot;highlighter-rouge&quot;&gt;package&lt;/code&gt; with a standardized hierarchical structure that holds executable code and the resources used by that code. Apps and &lt;code class=&quot;highlighter-rouge&quot;&gt;frameworks&lt;/code&gt; are examples of &lt;code class=&quot;highlighter-rouge&quot;&gt;bundles&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;libraries-vs-frameworks&quot;&gt;Libraries vs Frameworks&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;Library&lt;/code&gt; is a collection of &lt;code class=&quot;highlighter-rouge&quot;&gt;object files&lt;/code&gt; which are compiled .m files outputed by Clang as a .o file. (Author’s note: presumably .swift files are compiled into .o files as well, but I haven’t checked.) Like gcc, Clang is a compiler for the c-family of languages and is backed by the LLVM compiler infrastructure which stands for “Low Level Virtual Machine” despite it &lt;a href=&quot;https://llvm.org/&quot;&gt;not being a Virtual Machine&lt;/a&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;Object files&lt;/code&gt; contain symbols for the linker to piece together into a &lt;code class=&quot;highlighter-rouge&quot;&gt;Mach-O Object File&lt;/code&gt; (see below).&lt;/li&gt;
  &lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;Framework&lt;/code&gt; is a type of &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle&lt;/code&gt; containing a static or dynamic &lt;code class=&quot;highlighter-rouge&quot;&gt;library&lt;/code&gt; and its resources.&lt;/li&gt;
  &lt;li&gt;So, a &lt;code class=&quot;highlighter-rouge&quot;&gt;Framework&lt;/code&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle&lt;/code&gt; (which is also a &lt;code class=&quot;highlighter-rouge&quot;&gt;package&lt;/code&gt;) that contains a &lt;code class=&quot;highlighter-rouge&quot;&gt;library&lt;/code&gt; which is a collection of &lt;code class=&quot;highlighter-rouge&quot;&gt;object files&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mach-o-object-files--types&quot;&gt;Mach-O Object Files &amp;amp; Types&lt;/h2&gt;
&lt;p&gt;Distinct from an &lt;code class=&quot;highlighter-rouge&quot;&gt;object file&lt;/code&gt; generated by clang, these &lt;code class=&quot;highlighter-rouge&quot;&gt;Macho-O Object Files&lt;/code&gt; are the various &lt;a href=&quot;https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/MachOTopics/1-Articles/building_files.html&quot;&gt;options for output from Xcode’s linker phase&lt;/a&gt; under Build Settings -&amp;gt; Linking -&amp;gt; Mach-O type. The most significant to this writing are &lt;code class=&quot;highlighter-rouge&quot;&gt;Static Library&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Dynamic Library&lt;/code&gt;, which inform how a Library or Framework may be linked by its consumer:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/libraries_frameworks__mach_o_types.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;static-vs-dynamic&quot;&gt;Static vs Dynamic&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Static&lt;/th&gt;
      &lt;th&gt;Dynamic&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Library&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;http://localhost:4000/images/libraries_frameworks__static_library.png&quot; alt=&quot;&quot; /&gt; A &lt;strong&gt;.a&lt;/strong&gt; file linked by the Static Linker at compile time. Must be shipped with header files.&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;http://localhost:4000/images/libraries_frameworks__dynamic_library.png&quot; alt=&quot;&quot; /&gt; A &lt;strong&gt;.dylib&lt;/strong&gt; file linked by the Dynamic Linker, or  &lt;code class=&quot;highlighter-rouge&quot;&gt;dyld&lt;/code&gt; as-needed at runtime. The advantage is that libraries can be shared and don’t take up space in each app. For example, all iOS and macOS system libraries are dynamic. The disadvantage is a slower launch/run time since the linking phase must occur during runtime.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Framework&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;http://localhost:4000/images/libraries_frameworks__static_framework.png&quot; alt=&quot;&quot; /&gt; A &lt;code class=&quot;highlighter-rouge&quot;&gt;package&lt;/code&gt; with the &lt;strong&gt;.framework&lt;/strong&gt; extension containing a Static Library and its headers and other resources. Linked at compile time.&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;http://localhost:4000/images/libraries_frameworks__dynamic_framework.png&quot; alt=&quot;&quot; /&gt; A &lt;code class=&quot;highlighter-rouge&quot;&gt;package&lt;/code&gt; with the &lt;strong&gt;.framework&lt;/strong&gt; extension containing a Dynamic Library and its headers and other resources. These must either be made available by the operating system (As all iOS and MacOS libraries/frameworks are) or be &lt;code class=&quot;highlighter-rouge&quot;&gt;embedded&lt;/code&gt; into the App’s bundle.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;identifying-whether-a-framework-is-static-or-dynamic&quot;&gt;Identifying whether a framework is Static or Dynamic&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/32591878/ios-is-it-a-static-or-a-dynamic-framework&quot;&gt;From&lt;/a&gt;, you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt; command:&lt;/p&gt;

&lt;p&gt;A Static framework looks like this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd iOS/Crashlytics.framework
$ ls -l
total 9984
-rwxr-xr-x  1 andy  staff  4710656 11 Sep 17:11 Crashlytics
drwxr-xr-x  8 andy  staff      272 11 Sep 17:11 Headers
-rw-r--r--  1 andy  staff     1553 11 Sep 17:11 Info.plist
drwxr-xr-x  3 andy  staff      102 11 Sep 17:11 Modules
-rwxr-xr-x  1 andy  staff   146164 11 Sep 17:11 run
-rwxr-xr-x  1 andy  staff   241688 11 Sep 17:11 submit
$ file Crashlytics 
Crashlytics: Mach-O universal binary with 5 architectures
Crashlytics (for architecture armv7):   current ar archive random library
Crashlytics (for architecture armv7s):  current ar archive random library
Crashlytics (for architecture i386):    current ar archive random library
Crashlytics (for architecture x86_64):  current ar archive random library
Crashlytics (for architecture arm64):   current ar archive random library
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A dynamic framework will look like this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd /Library/Frameworks/iTunesLibrary.framework/
$ ls -l
total 40
lrwxr-xr-x  1 root  wheel   24 10 Sep 17:38 Headers -&amp;gt; Versions/Current/Headers
lrwxr-xr-x  1 root  wheel   24 10 Sep 17:38 Modules -&amp;gt; Versions/Current/Modules
lrwxr-xr-x  1 root  wheel   26 10 Sep 17:38 Resources -&amp;gt; Versions/Current/Resources
drwxr-xr-x  4 root  wheel  136 10 Sep 17:41 Versions
lrwxr-xr-x  1 root  wheel   22 10 Sep 17:38 XPCServices -&amp;gt; Versions/A/XPCServices
lrwxr-xr-x  1 root  wheel   30 10 Sep 17:38 iTunesLibrary -&amp;gt; Versions/Current/iTunesLibrary
$ file Versions/Current/iTunesLibrary 
Versions/Current/iTunesLibrary: Mach-O universal binary with 2 architectures
Versions/Current/iTunesLibrary (for architecture i386): Mach-O dynamically linked shared library i386
Versions/Current/iTunesLibrary (for architecture x86_64):   Mach-O 64-bit dynamically linked shared library x86_64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;potential-gains-from-switching-to-from-dynamic-to-static-libsframeworks&quot;&gt;Potential Gains from switching to From Dynamic to Static Libs/Frameworks&lt;/h2&gt;
&lt;p&gt;In an example using 27 frameworks, &lt;a href=&quot;https://medium.com/@acecilia/static-vs-dynamic-frameworks-in-swift-an-in-depth-analysis-ff61a77eec65&quot;&gt;this dev&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Reduced app size 14.55%&lt;/strong&gt;. They theorized this was due to the compiler being able to remove unused symbols which is not possible when using dynamic frameworks, and linked this &lt;a href=&quot;https://github.com/ReactiveX/RxSwift/pull/1960&quot;&gt;heated exchange&lt;/a&gt; for reference.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reduced first-launch load time by about 37.5%&lt;/strong&gt;. Subsequent launches were comparable thanks to the dyld cache.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Though the first-launch speed gains are worth pursuing, the size gains should only affect Swift libraries/frameworks since an Objective-C static library aught to be passed to the linker with the -ObjC option specified which “Loads all members of static archive libraries that implement an Objective-C class or category” since one of ObjC’s strengths/weaknesses is that it loads the entire symbol table and you can send any message to any object.&lt;/p&gt;

&lt;p&gt;From &lt;a href=&quot;https://stackoverflow.com/questions/2567498/objective-c-categories-in-static-library&quot;&gt;https://stackoverflow.com/questions/2567498/objective-c-categories-in-static-library&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;To resolve this issue, the static library should pass the -ObjC option to the linker. This flag causes the linker to load every object file in the library that defines an Objective-C class or category. While this option will typically result in a larger executable (due to additional object code loaded into the application), it will allow the successful creation of effective Objective-C static libraries that contain categories on existing classes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;static-vs-dynamic-frameworks-and-swift&quot;&gt;Static vs Dynamic Frameworks and Swift&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;It used to be the case that a framework that used Swift &lt;strong&gt;had to&lt;/strong&gt; be dynamic, probably because the Swift libraries must be included in the framework package because of Swifts ABI instability prior to 5.0, and the fact that because they were system libraries, they were distributed as dylibs.&lt;/li&gt;
  &lt;li&gt;ABI Stability came with Swift 5 in Xcode 10.2 (March of 2019). This allowed the App Store to &lt;a href=&quot;https://developer.apple.com/documentation/xcode-release-notes/swift-5-release-notes-for-xcode-10_2&quot;&gt;thin app downloads&lt;/a&gt; of their Swift dylibs so long as the device is running iOS 12.2 or higher (and thus came with the Swift dylibs already installed). For prior iOS versions, the Swift dylibs would still have to be included in the app and downloaded by the user.&lt;/li&gt;
  &lt;li&gt;Module Stability came in Swift 5.1 with Xcode 11.0 (September of 2019). This allowed true &lt;a href=&quot;https://www.donnywals.com/what-is-module-stability-in-swift-and-why-should-you-care/&quot;&gt;backwards compatibility&lt;/a&gt; with prior versions of Swift (at the time, only 5.0 and 5.0.1):
    &lt;blockquote&gt;
      &lt;p&gt;While ABI Stability allows programs written with different versions of Swift to exist in a shared runtime, Module Stability allows you to use frameworks compiled with different versions of Swift in a project that might use yet another version of Swift.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;You can now make a Swift static library. This &lt;a href=&quot;https://medium.com/onfido-tech/distributing-compiled-ios-swift-static-libraries-and-swift-static-frameworks-7fecc4f3d182&quot;&gt;article&lt;/a&gt; gives pretty detailed instructions, including what to do with the .swiftmodule.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;swift-in-a-framework-still-not-a-good-idea&quot;&gt;Swift in a Framework Still Not a Good Idea&lt;/h2&gt;
&lt;p&gt;And it probably won’t be until most major apps are on Swift 5.1+ and/or until iOS 12.1 dies.&lt;/p&gt;

&lt;p&gt;If the framework uses Swift 5.1+, the host app uses Swift 5.0+, and the app targets iOS 12.2 or higher, you’re golden. But, big apps tend to target very low iOS versions so a framework has to target 12.1 and lower (and thus include the Swift dylibs) to be of any real value to the world. Users on 12.1 and lower then have to download them, potentially twice if the framework and app have differing Swift versions (which may not even be compatible with each other if one of those is prior to 5.1). It’s possible that app thinning doesn’t extend to removing redundant versions of the same dylibs in which case the user would have to download them twice even if the Swift versions matched. This seems to be somewhat implied by “Apps using bundled runtimes will however not get the benefits of App Store app thinning” on &lt;a href=&quot;https://swift.org/blog/abi-stability-and-apple/&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, we’re effectively in the same boat we were in back in 2017 or 2018: Using swift in a framework has the potential for incompatibility with the host app and may increase download sizes by about 5 megs.&lt;/p&gt;

&lt;p&gt;Assuming that 1 major version of iOS is dropped from general support per year and with iOS 9 finally getting killed off this year (2020), 12.1 may not be killed until 2022 or 2023 at which point we can finally write a framework in Swift and be able to guarantee that it won’t cause these kinds of integration problems for a major publisher. It’s likely that prior to that enough major publishers will adopt Swift 5.1+ that the balance shifts and it becomes the rule rather than the exception that a framework will be written in Swift, but I don’t think we’re there yet.&lt;/p&gt;

&lt;h2 id=&quot;modules-and-modulemaps&quot;&gt;Modules and Modulemaps&lt;/h2&gt;

&lt;p&gt;This &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2013/404/&quot;&gt;Video from WWDC 2013&lt;/a&gt; explains it very well:  The &lt;code class=&quot;highlighter-rouge&quot;&gt;#include&lt;/code&gt; preprocessor directive just pastes the included file right into the code. The &lt;code class=&quot;highlighter-rouge&quot;&gt;#import&lt;/code&gt; directive does the same but it checks if it has been included before. Since both essentially do a copypaste job, it can result in chaos if you accidentally &lt;code class=&quot;highlighter-rouge&quot;&gt;#define&lt;/code&gt; something that the include/import uses (like strong or readonly). It also results in a cross-product increase in code size in the eyes of the compiler since most of your files grow by the size of the common includes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/libraries_frameworks__non_scalable_includes.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A Pre-Compiled Header &lt;em&gt;partially&lt;/em&gt; addresses this by allowing you to compile the common code &lt;strong&gt;once&lt;/strong&gt;, but they result in namespace pollution - parts of your code get access to things they don’t need like a Json fetcher having access to UIKit.&lt;/p&gt;

&lt;h3 id=&quot;modules&quot;&gt;Modules&lt;/h3&gt;
&lt;p&gt;Modules address the fragility and scalability problem of headers by encapsulating the framework. To make use of them, you use the  &lt;code class=&quot;highlighter-rouge&quot;&gt;@import&lt;/code&gt; directive which does a “Semantic Import”; it loads the complete semantic definition of the framework, and the compiler compiles it &lt;em&gt;once&lt;/em&gt; as an isolated unit. As such, it doesn’t need to parse the headers and local macros have no effect on the the Framework’s API. The &lt;code class=&quot;highlighter-rouge&quot;&gt;@import&lt;/code&gt; directive also eliminates the need to add the framework via “Link Binary With Libraries”; the compiler adds it for you! You can also import only some of the module. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;@import iAd.AdBannerView&lt;/code&gt; will only import iAds’ banner view and  &lt;code class=&quot;highlighter-rouge&quot;&gt;@import iAd.AdInterstitialView&lt;/code&gt; will only import its interstitials. For known modules (ones with a modulemap visible to the compiler), &lt;code class=&quot;highlighter-rouge&quot;&gt;#inlcude&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;#import&lt;/code&gt; are automatically mapped to the equivalent &lt;code class=&quot;highlighter-rouge&quot;&gt;@import&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;example-modulemap&quot;&gt;Example modulemap&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/libraries_frameworks__modulemap_example.png&quot; alt=&quot;&quot; /&gt;
This says&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;“Include UIKit.h”, which is what you used to do anyways.&lt;/li&gt;
  &lt;li&gt;Next it says “Anything that I import is a submodule”&lt;/li&gt;
  &lt;li&gt;It also says “Link against the UIKit Framework”&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;modern-usage&quot;&gt;Modern Usage&lt;/h3&gt;

&lt;p&gt;In 2013, Xcode 5 added “Enable Modules” under Build Settings -&amp;gt; Apple Clang - Language - Modules. This is set to Yes by default. Later in In 2014 with Xcode 6, support for user-defined modules was added, and “Defines Module” is now set to Yes by default. Thus, any modern user-defined framework project has a modulemap and can be imported via &lt;code class=&quot;highlighter-rouge&quot;&gt;@import&lt;/code&gt;. &lt;a href=&quot;http://blog.bjhomer.com/2015/05/defining-modules-for-custom-libraries.html&quot;&gt;This article&lt;/a&gt; static modules, but I have not tested to see if it works or if the steps are still necessary.&lt;/p&gt;

&lt;h3 id=&quot;mixing-swift--objective-c-in-a-framework&quot;&gt;Mixing Swift &amp;amp; Objective C in a Framework&lt;/h3&gt;
&lt;p&gt;This requires the use of a modulemap because bridging headers can’t be used inside framework projects. &lt;a href=&quot;https://medium.com/allatoneplace/challenges-building-a-swift-framework-d882867c97f9&quot;&gt;Example&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;defunct-topics&quot;&gt;Defunct Topics&lt;/h2&gt;

&lt;h3 id=&quot;real-versus-fake-frameworks&quot;&gt;Real versus Fake Frameworks&lt;/h3&gt;
&lt;p&gt;You can safely skip this section as this distinction is no longer of any real significance, Xcode having fixed this bug(?) in 2014 with the release of Xcode 6.&lt;/p&gt;

&lt;p&gt;In disallowing dynamically linked libraries for iOS Apple accidentally(?) removed static iOS framework creation functionality. Developers responded with the “relocatable object file” bundle hack, which tricked Xcode into building something that mostly resembles a framework, but is really a bundle. Alternately, with some tweaking of Xcode itself you could add the ability to create a static iOS framework back into Xcode using this plugin: &lt;a href=&quot;https://github.com/kstenerud/iOS-Universal-Framework&quot;&gt;iOS-Universal-Framework&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;umbrella-framework&quot;&gt;Umbrella Framework&lt;/h3&gt;
&lt;p&gt;A framework that contains other frameworks. It is &lt;a href=&quot;https://medium.com/@andreamiotz/ios-umbrella-framework-with-cocoapods-57d2d3c2daa9&quot;&gt;possible but not officially supported on iOS&lt;/a&gt;. Normally, when you create a framework which has a dependency, the app is responsible for adding that dependency along with your framework into the project.&lt;/p&gt;

&lt;h3 id=&quot;code-signing-a-framework&quot;&gt;Code Signing a Framework&lt;/h3&gt;
&lt;p&gt;According to &lt;a href=&quot;https://stackoverflow.com/questions/30963294/creating-ios-osx-frameworks-is-it-necessary-to-codesign-them-before-distributin&quot;&gt;this Stackoverflow post&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Xcode used to force you to code sign a framework when compiling it&lt;/li&gt;
  &lt;li&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;lipo&lt;/code&gt; removes codesigning, which makes sense since it modifies the binary.&lt;/li&gt;
  &lt;li&gt;Because of this, some of the most commonly distributed frameworks have &lt;em&gt;no&lt;/em&gt; codesigning:
    &lt;blockquote&gt;
      &lt;p&gt;Binary framework distributions of well-known open source projects on Github are not codesigned. Command codesign -d -vvvv gives: “code object is not signed at all” on all of the binary iOS and OSX frameworks I used to explore. Some examples: ReactiveCocoa and Mantle, Realm, PromiseKit.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;As of Xcode 9.4 (May 2018), the IDE will ask you to disable code signing for iOS Cocoa Touch Frameworks. Apple now says it is not recommended that you code sign your .framework.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I don’t remember ever coming accross code signing issues with frameworks, probably because the framework projects I’ve worked on always used &lt;code class=&quot;highlighter-rouge&quot;&gt;lipo&lt;/code&gt; to alter the architecture slices in the binary before shipping.&lt;/p&gt;

&lt;h2 id=&quot;cocoapods&quot;&gt;Cocoapods&lt;/h2&gt;
&lt;p&gt;By default, Cocoapods compiles all your pods into a big static library.  Prior to March 2019, Swift could not support static libraries because of Swift’s ABI instability - the swift dylibs had to be included in th framework, forcing it to be a dynamic framework. Cocoapods thus offered the &lt;code class=&quot;highlighter-rouge&quot;&gt;use_frameworks!&lt;/code&gt; directive which tells it to use dynamic frameworks 
instead of making a big static library. According to &lt;a href=&quot;https://blog.cocoapods.org/CocoaPods-0.36/&quot;&gt;Cocoapod’s 0.36 Release Notes&lt;/a&gt;,&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;This is an all or nothing approach per integrated targets, because we can’t ensure to properly build frameworks, whose transitive dependencies are static libraries.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However with with the ABI Stability offered by Swift 5 in Xcode 10.2 (March of 2019), swift static libraries finally became possible, and Cocoapods 1.5.0 (April 2019) offered &lt;code class=&quot;highlighter-rouge&quot;&gt;use_modular_headers!&lt;/code&gt; instead.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;In this release, you will be able to opt into stricter header search paths (and module map generation for Objective-C pods). As a pod author, you can add ‘DEFINES_MODULE’ =&amp;gt; ‘YES’ to your pod_target_xcconfig. Alternatively, in your Podfile you can add use_modular_headers! to enable the stricter search paths and module map generation for all of your pods, or you can add :modular_headers =&amp;gt; true to a single pod declaration to enable for only that pod.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;mopubs-cocoapod&quot;&gt;MoPub’s Cocoapod&lt;/h3&gt;

&lt;p&gt;According to &lt;a href=&quot;http://onebigfunction.com/ios/2015/12/31/mopub-mo-problems/&quot;&gt;this&lt;/a&gt;, using MoPub’s Cocoapod in a swift project seems to require either adding MoPub to your bridging header using &lt;code class=&quot;highlighter-rouge&quot;&gt;use_frameworks!&lt;/code&gt;. The author laments that there’s not a way to configure your Podfile such that &lt;code class=&quot;highlighter-rouge&quot;&gt;use_frameworks!&lt;/code&gt; can be applied on a case-by-case basis instead of to your whole project. My guess is because MoPub is in the akward postion of wanting to support &lt;em&gt;all&lt;/em&gt; of the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A source distribution&lt;/li&gt;
  &lt;li&gt;Compilation as a framework&lt;/li&gt;
  &lt;li&gt;Swift apps that don’t want to use a bridging header&lt;/li&gt;
  &lt;li&gt;Objective-C Apps that don’t want any Swift&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It seems like an oversite for such a well-established company to just &lt;em&gt;imply&lt;/em&gt; that you should use &lt;code class=&quot;highlighter-rouge&quot;&gt;use_frameworks!&lt;/code&gt;, not explain why and end the conversation there but given that their own &lt;a href=&quot;https://github.com/mopub/mopub-ios-sdk/tree/master/Canary&quot;&gt;Canary project&lt;/a&gt; has them using it, maybe it’s just something they’re not super aware of.&lt;/p&gt;

&lt;h3 id=&quot;pod_target_xcconfig&quot;&gt;pod_target_xcconfig&lt;/h3&gt;
&lt;p&gt;This is where you can add ‘DEFINES_MODULE’ =&amp;gt; ‘YES’. Documented &lt;a href=&quot;https://guides.cocoapods.org/syntax/podspec.html#pod_target_xcconfig&quot;&gt;here&lt;/a&gt;. According to &lt;a href=&quot;https://stackoverflow.com/questions/51227921/is-there-any-downside-to-setting-defines-module-yes-in-my-podspec&quot;&gt;this&lt;/a&gt; there’s no real downside for doing so, but I tested it with a MoPub Adapter Pod that used MoPub as a dependency and it seemed like it caused MoPub to be included twice, so I had to leave it out.&lt;/p&gt;

&lt;h3 id=&quot;frameworks&quot;&gt;frameworks&lt;/h3&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;frameworks&lt;/code&gt; directive in a podfile specifies &lt;a href=&quot;https://guides.cocoapods.org/syntax/podspec.html#frameworks&quot;&gt;a list of system frameworks that the user’s target needs to link against&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;weak_frameworks&quot;&gt;weak_frameworks&lt;/h3&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;frameworks&lt;/code&gt; directive in a podfile specifies &lt;a href=&quot;https://guides.cocoapods.org/syntax/podspec.html#frameworks&quot;&gt;a list of frameworks that the user’s target needs to &lt;strong&gt;weakly&lt;/strong&gt; link against&lt;/a&gt;. This means that the pod is written such that if the framework is not available it will still run.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/23354840/what-does-weak-framework-mean-in-xcodes-build-settings&quot;&gt;Example&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;For example, one might want to mark SpriteKit as optional, so the app could still run on an OS that doesn’t have it (for example, anything older than 7.0).&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">Files, Directories, Packages, Bundles and Frameworks A package is any directory that the Finder presents to the user as if it were a single file. Finder considers a directory to be a package if any of the following conditions are true: The directory has a known filename extension: .app, .bundle, .framework, .plugin, .kext, and so on. The directory has an extension that some other application claims represents a package type; see Document Packages. The directory has its package bit set. A bundle is type of package with a standardized hierarchical structure that holds executable code and the resources used by that code. Apps and frameworks are examples of bundles.</summary></entry><entry><title type="html">Using launchd instead of cron</title><link href="http://localhost:4000/2020/04/06/using-launchd-instead-of-cron.html" rel="alternate" type="text/html" title="Using launchd instead of cron" /><published>2020-04-06T14:42:00-07:00</published><updated>2020-04-06T14:42:00-07:00</updated><id>http://localhost:4000/2020/04/06/using-launchd-instead-of-cron</id><content type="html" xml:base="http://localhost:4000/2020/04/06/using-launchd-instead-of-cron.html">Create a plist in `/Users/scottmccoy/Library/LaunchAgents`. Make sure to use full paths to your scripts/log files.

```
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
    &lt;key&gt;Label&lt;/key&gt;
    &lt;string&gt;free_up_disk_space.command&lt;/string&gt;
    &lt;key&gt;ProgramArguments&lt;/key&gt;
    &lt;array&gt;
        &lt;string&gt;/Users/scottmccoy/free_up_disk_space.command&lt;/string&gt;
    &lt;/array&gt;
    &lt;key&gt;RunAtLoad&lt;/key&gt;
    &lt;false/&gt;
    &lt;key&gt;StandardErrorPath&lt;/key&gt;
    &lt;string&gt;/Users/scottmccoy/script_logs/free_up_disk_space.err&lt;/string&gt;
    &lt;key&gt;StandardOutPath&lt;/key&gt;
    &lt;string&gt;/Users/scottmccoy/script_logs/free_up_disk_space.log&lt;/string&gt;
    &lt;key&gt;StartCalendarInterval&lt;/key&gt;
    &lt;dict&gt;
        &lt;key&gt;Hour&lt;/key&gt;
        &lt;integer&gt;23&lt;/integer&gt;
        &lt;key&gt;Minute&lt;/key&gt;
        &lt;string&gt;50&lt;/string&gt;
    &lt;/dict&gt;
&lt;/dict&gt;
&lt;/plist&gt;
```

Activate/Deactivate it like so:
```
launchctl load free_up_disk_space.plist
launchctl unload free_up_disk_space.plist
```


Debug it by having it run every 20 seconds with  `StartInterval`:
```
&lt;key&gt;StartInterval&lt;/key&gt;
&lt;integer&gt;20&lt;/integer&gt;
```

In Console.app, watch the System Log for issues starting the script and watch the LaunchAgent's log files for issues running it. 

Once you're satisfied with its stability, I reccomend switching to `StartCalendarInterval`. If the machine goes offline,  `StartInterval` will run all missed executions of the script at re-launch.</content><author><name></name></author><summary type="html">Create a plist in /Users/scottmccoy/Library/LaunchAgents. Make sure to use full paths to your scripts/log files.</summary></entry><entry><title type="html">Ssh Multiple Github Logins</title><link href="http://localhost:4000/2020/03/27/ssh-multiple-github-logins.html" rel="alternate" type="text/html" title="Ssh Multiple Github Logins" /><published>2020-03-27T17:54:47-07:00</published><updated>2020-03-27T17:54:47-07:00</updated><id>http://localhost:4000/2020/03/27/ssh-multiple-github-logins</id><content type="html" xml:base="http://localhost:4000/2020/03/27/ssh-multiple-github-logins.html">To simplify access on github it’s a great idea to use ssh keys for authentication. To add one, click on your user, then settings, then SSH and GPG Keys, or just go to https://github.com/settings/keys.
However, Github does not support multiple accounts sharing the same ssh key. One way to get around this is to create multiple entries in your ssh config file:

~/.ssh/config

```
#Vrtcal Github Enterprise account
Host github.vrtcal.com
HostName github.vrtcal.com
User git
IdentityFile ~/.ssh/id_rsa

#personal account
Host scotthmccoy-github
HostName github.com
Port 22
User git
IdentityFile ~/.ssh/id_rsa

#vrtcalsdkdev account
Host vrtcalsdkdev-github
HostName github.com
Port 22
User git
IdentityFile ~/.ssh/id_rsa_vrtcalsdkdev
```

Test the connection on each account:
```
scotts-mbp:ios-sdk scottmccoy$ ssh -T git@vrtcalsdkdev-github
Hi vrtcalsdkdev! You've successfully authenticated, but GitHub does not provide shell access.
```

```
scotts-mbp:ios-sdk scottmccoy$ ssh -T git@scotthmccoy-github
Hi scotthmccoy! You've successfully authenticated, but GitHub does not provide shell access.
```


Then refer to the repo like so:
![]({{ site.url }}/images/multiple_ssh_github.png)</content><author><name>Scott McCoy</name></author><summary type="html">To simplify access on github it’s a great idea to use ssh keys for authentication. To add one, click on your user, then settings, then SSH and GPG Keys, or just go to https://github.com/settings/keys. However, Github does not support multiple accounts sharing the same ssh key. One way to get around this is to create multiple entries in your ssh config file:</summary></entry><entry><title type="html">free_disk_space.command</title><link href="http://localhost:4000/2020/03/26/freediskspacecommand.html" rel="alternate" type="text/html" title="free_disk_space.command" /><published>2020-03-26T17:11:00-07:00</published><updated>2020-03-26T17:11:00-07:00</updated><id>http://localhost:4000/2020/03/26/freediskspacecommand</id><content type="html" xml:base="http://localhost:4000/2020/03/26/freediskspacecommand.html">Sometimes when installing new versions of software, the path that bash has saved gets corrupted. Running the hash command on that command can fix it, or just running hash -r


```
[lunchvote@server /]$ node
-bash: /usr/local/bin/node: No such file or directory
hash node
[lunchvote@server /]$ node --version
v10.18.1
```</content><author><name>Scott McCoy</name></author><summary type="html">Sometimes when installing new versions of software, the path that bash has saved gets corrupted. Running the hash command on that command can fix it, or just running hash -r</summary></entry><entry><title type="html">CentOS 7 - Unblock a port</title><link href="http://localhost:4000/2020/02/08/centos-7-unblock-port.html" rel="alternate" type="text/html" title="CentOS 7 - Unblock a port" /><published>2020-02-08T15:31:00-08:00</published><updated>2020-02-08T15:31:00-08:00</updated><id>http://localhost:4000/2020/02/08/centos-7-unblock-port</id><content type="html" xml:base="http://localhost:4000/2020/02/08/centos-7-unblock-port.html">To unblock a port normally you'd use iptables which firewall-cmd is a wrapper for:&lt;br /&gt;&lt;br /&gt;iptables -I INPUT -p tcp --dport 12345 --syn -j ACCEPT&lt;br /&gt;service iptables save</content><author><name>Scott McCoy</name></author><summary type="html">To unblock a port normally you’d use iptables which firewall-cmd is a wrapper for:iptables -I INPUT -p tcp –dport 12345 –syn -j ACCEPTservice iptables save</summary></entry><entry><title type="html">Use lsof to see what processes are listening on which ports</title><link href="http://localhost:4000/2020/02/08/lsof-to-see-what-processes-are.html" rel="alternate" type="text/html" title="Use lsof to see what processes are listening on which ports" /><published>2020-02-08T15:19:00-08:00</published><updated>2020-02-08T15:19:00-08:00</updated><id>http://localhost:4000/2020/02/08/lsof-to-see-what-processes-are</id><content type="html" xml:base="http://localhost:4000/2020/02/08/lsof-to-see-what-processes-are.html">I learned a bit about how to see what's listening. If it doesn't say * in the rightmost column, the listed host is the only one with access. In this example, node is only accessible *from* localhost.&lt;br /&gt;&lt;br /&gt;sudo lsof -i -P -n | grep LISTEN&lt;br /&gt;&lt;br /&gt;systemd&amp;nbsp; &amp;nbsp; &amp;nbsp; 1&amp;nbsp; &amp;nbsp; &amp;nbsp; root&amp;nbsp; &amp;nbsp;29u&amp;nbsp; IPv4&amp;nbsp; &amp;nbsp;85062376&amp;nbsp; &amp;nbsp; &amp;nbsp; 0t0&amp;nbsp; TCP *:111 (LISTEN)&lt;br /&gt;httpd&amp;nbsp; &amp;nbsp; &amp;nbsp; 119&amp;nbsp; &amp;nbsp; &amp;nbsp; root&amp;nbsp; &amp;nbsp; 4u&amp;nbsp; IPv6&amp;nbsp; &amp;nbsp;85063110&amp;nbsp; &amp;nbsp; &amp;nbsp; 0t0&amp;nbsp; TCP *:80 (LISTEN)&lt;br /&gt;sendmail&amp;nbsp; &amp;nbsp;180&amp;nbsp; &amp;nbsp; &amp;nbsp; root&amp;nbsp; &amp;nbsp; 4u&amp;nbsp; IPv4&amp;nbsp; &amp;nbsp;85063338&amp;nbsp; &amp;nbsp; &amp;nbsp; 0t0&amp;nbsp; TCP 127.0.0.1:25 (LISTEN)&lt;br /&gt;rpcbind&amp;nbsp; &amp;nbsp; 707&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;rpc&amp;nbsp; &amp;nbsp; 4u&amp;nbsp; IPv4&amp;nbsp; &amp;nbsp;85062376&amp;nbsp; &amp;nbsp; &amp;nbsp; 0t0&amp;nbsp; TCP *:111 (LISTEN)&lt;br /&gt;rpcbind&amp;nbsp; &amp;nbsp; 707&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;rpc&amp;nbsp; &amp;nbsp;11u&amp;nbsp; IPv6&amp;nbsp; &amp;nbsp;93778193&amp;nbsp; &amp;nbsp; &amp;nbsp; 0t0&amp;nbsp; TCP *:111 (LISTEN)&lt;br /&gt;httpd&amp;nbsp; &amp;nbsp; &amp;nbsp;5967&amp;nbsp; &amp;nbsp; apache&amp;nbsp; &amp;nbsp; 4u&amp;nbsp; IPv6&amp;nbsp; &amp;nbsp;85063110&amp;nbsp; &amp;nbsp; &amp;nbsp; 0t0&amp;nbsp; TCP *:80 (LISTEN)&lt;br /&gt;httpd&amp;nbsp; &amp;nbsp; &amp;nbsp;6058&amp;nbsp; &amp;nbsp; apache&amp;nbsp; &amp;nbsp; 4u&amp;nbsp; IPv6&amp;nbsp; &amp;nbsp;85063110&amp;nbsp; &amp;nbsp; &amp;nbsp; 0t0&amp;nbsp; TCP *:80 (LISTEN)&lt;br /&gt;httpd&amp;nbsp; &amp;nbsp; &amp;nbsp;6059&amp;nbsp; &amp;nbsp; apache&amp;nbsp; &amp;nbsp; 4u&amp;nbsp; IPv6&amp;nbsp; &amp;nbsp;85063110&amp;nbsp; &amp;nbsp; &amp;nbsp; 0t0&amp;nbsp; TCP *:80 (LISTEN)&lt;br /&gt;httpd&amp;nbsp; &amp;nbsp; &amp;nbsp;7369&amp;nbsp; &amp;nbsp; apache&amp;nbsp; &amp;nbsp; 4u&amp;nbsp; IPv6&amp;nbsp; &amp;nbsp;85063110&amp;nbsp; &amp;nbsp; &amp;nbsp; 0t0&amp;nbsp; TCP *:80 (LISTEN)&lt;br /&gt;httpd&amp;nbsp; &amp;nbsp; &amp;nbsp;8282&amp;nbsp; &amp;nbsp; apache&amp;nbsp; &amp;nbsp; 4u&amp;nbsp; IPv6&amp;nbsp; &amp;nbsp;85063110&amp;nbsp; &amp;nbsp; &amp;nbsp; 0t0&amp;nbsp; TCP *:80 (LISTEN)&lt;br /&gt;node&amp;nbsp; &amp;nbsp; &amp;nbsp;10934 lunchvote&amp;nbsp; &amp;nbsp;14u&amp;nbsp; IPv4 1986748894&amp;nbsp; &amp;nbsp; &amp;nbsp; 0t0&amp;nbsp; TCP 127.0.0.1:5858 (LISTEN)&lt;br /&gt;node&amp;nbsp; &amp;nbsp; &amp;nbsp;10934 lunchvote&amp;nbsp; &amp;nbsp;18u&amp;nbsp; IPv4 1986749280&amp;nbsp; &amp;nbsp; &amp;nbsp; 0t0&amp;nbsp; TCP 127.0.0.1:3001 (LISTEN)&lt;br /&gt;sshd&amp;nbsp; &amp;nbsp; &amp;nbsp;10984&amp;nbsp; &amp;nbsp; &amp;nbsp; root&amp;nbsp; &amp;nbsp; 3u&amp;nbsp; IPv4 1989274030&amp;nbsp; &amp;nbsp; &amp;nbsp; 0t0&amp;nbsp; TCP *:22 (LISTEN)&lt;br /&gt;sshd&amp;nbsp; &amp;nbsp; &amp;nbsp;10984&amp;nbsp; &amp;nbsp; &amp;nbsp; root&amp;nbsp; &amp;nbsp; 4u&amp;nbsp; IPv6 1989274032&amp;nbsp; &amp;nbsp; &amp;nbsp; 0t0&amp;nbsp; TCP *:22 (LISTEN)&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content><author><name>Scott McCoy</name></author><summary type="html">I learned a bit about how to see what’s listening. If it doesn’t say * in the rightmost column, the listed host is the only one with access. In this example, node is only accessible from localhost.sudo lsof -i -P -n grep LISTENsystemd      1      root   29u  IPv4   85062376      0t0  TCP *:111 (LISTEN)httpd      119      root    4u  IPv6   85063110      0t0  TCP *:80 (LISTEN)sendmail   180      root    4u  IPv4   85063338      0t0  TCP 127.0.0.1:25 (LISTEN)rpcbind    707       rpc    4u  IPv4   85062376      0t0  TCP *:111 (LISTEN)rpcbind    707       rpc   11u  IPv6   93778193      0t0  TCP *:111 (LISTEN)httpd     5967    apache    4u  IPv6   85063110      0t0  TCP *:80 (LISTEN)httpd     6058    apache    4u  IPv6   85063110      0t0  TCP *:80 (LISTEN)httpd     6059    apache    4u  IPv6   85063110      0t0  TCP *:80 (LISTEN)httpd     7369    apache    4u  IPv6   85063110      0t0  TCP *:80 (LISTEN)httpd     8282    apache    4u  IPv6   85063110      0t0  TCP *:80 (LISTEN)node     10934 lunchvote   14u  IPv4 1986748894      0t0  TCP 127.0.0.1:5858 (LISTEN)node     10934 lunchvote   18u  IPv4 1986749280      0t0  TCP 127.0.0.1:3001 (LISTEN)sshd     10984      root    3u  IPv4 1989274030      0t0  TCP *:22 (LISTEN)sshd     10984      root    4u  IPv6 1989274032      0t0  TCP *:22 (LISTEN)&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;</summary></entry><entry><title type="html">Fix corrupted path with hash command</title><link href="http://localhost:4000/2020/01/27/hash-command.html" rel="alternate" type="text/html" title="Fix corrupted path with hash command" /><published>2020-01-27T14:03:00-08:00</published><updated>2020-01-27T14:03:00-08:00</updated><id>http://localhost:4000/2020/01/27/hash-command</id><content type="html" xml:base="http://localhost:4000/2020/01/27/hash-command.html">Sometimes when installing new versions of software, the path that bash has saved gets corrupted. Running the hash command on that command can fix it, or just running hash -r


```
[lunchvote@server /]$ node
-bash: /usr/local/bin/node: No such file or directory
hash node
[lunchvote@server /]$ node --version
v10.18.1
```</content><author><name>Scott McCoy</name></author><summary type="html">Sometimes when installing new versions of software, the path that bash has saved gets corrupted. Running the hash command on that command can fix it, or just running hash -r</summary></entry><entry><title type="html">Swift - Array of Generics of mixed types (Don’t!!)</title><link href="http://localhost:4000/2020/01/14/swift-array-of-generics-of-mixed-types.html" rel="alternate" type="text/html" title="Swift - Array of Generics of mixed types (Don't!!)" /><published>2020-01-14T12:03:00-08:00</published><updated>2020-01-14T12:03:00-08:00</updated><id>http://localhost:4000/2020/01/14/swift-array-of-generics-of-mixed-types</id><content type="html" xml:base="http://localhost:4000/2020/01/14/swift-array-of-generics-of-mixed-types.html">Most common data formats (Json, Plist, XML) support arrays of mixed types like: [&quot;foo&quot;, 1, {&quot;a&quot;:3}]&lt;br /&gt;&lt;br /&gt;I often find myself wanting to make a wrapper that provides functionality like CustomStringConvertible, serialization to UserDefaults and so forth and then make an array of it:&lt;br /&gt;&lt;br /&gt;let arr = [MyClass]()&lt;br /&gt;&lt;br /&gt;But I want to be able to tell what the instance of MyClass is wrapping, so I want MyClass to be generic:&lt;br /&gt;&lt;br /&gt;let firstElem = MyClass(1)&lt;br /&gt;let secondElem = MyClass(&quot;Foo&quot;)&lt;br /&gt;&lt;br /&gt;let arr = [firstElem, secondElem]&lt;br /&gt;&lt;br /&gt;But this results in &quot;Heterogeneous collection literal could only be inferred to '[Any]'; add explicit type annotation if this is intentional&quot; since firstElem is of type MyClass&amp;lt;Int&amp;gt; and secondElem is of type MyClass&amp;lt;String&amp;gt;.&lt;string&gt;&amp;nbsp;&lt;/string&gt;&lt;br /&gt;&lt;br /&gt;Making it an array of MyClass also doesn't work:&lt;br /&gt;let arr:[MyClass] = [firstElem, secondElem] -&amp;gt; &quot;Cannot convert value of type 'MyClass&lt;int&gt;' to expected element type 'MyClass'&quot;&quot;&lt;/int&gt;&lt;br /&gt;&lt;br /&gt;The compiler treats them as completely different data types!&lt;br /&gt;&lt;br /&gt;So what are some actual solutions?&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;1. Make an array of your class type but make the type parameter Any:&lt;br /&gt;&lt;br /&gt;let firstElem:MyClass&lt;any&gt; = MyClass(1)&lt;/any&gt;&lt;br /&gt;let secondElem:MyClass&lt;any&gt; = MyClass(&quot;Foo&quot;)&lt;/any&gt;&lt;br /&gt;arr:[MyClass&lt;any&gt;] = [&lt;/any&gt;&lt;br /&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;firstElem,&lt;br /&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;secondElem&lt;br /&gt;]&lt;br /&gt;&lt;br /&gt;Note that this wipes out the utility of having MyClass even *be* generic since instances of it are now explicitly MyClass&amp;lt;Any&amp;gt;rather than a&amp;nbsp;&lt;int&gt;&lt;int&gt;&lt;string&gt;&lt;string&gt;MyClass&amp;lt;Int&amp;gt; and secondElem and MyClass&amp;lt;String&amp;gt;.&lt;/string&gt;&lt;/string&gt;&lt;/int&gt;&lt;/int&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;2. Make an array of Any:&lt;br /&gt;&lt;br /&gt;let arr:[Any] = [firstElem, secondElem]&lt;br /&gt;&lt;br /&gt;We get the benefits of generics, but the risk of an Any array.&lt;br /&gt;&lt;br /&gt;Note that it's tempting to try and hide the array inside a container and then gate access to it with a func:&lt;br /&gt;&lt;br /&gt;func add(item:MyClass) {&lt;br /&gt;&amp;nbsp; &lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;But this gets you a &quot;Reference to generic type 'MyClass' requires arguments in &amp;lt;...&amp;gt;&quot;&quot;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;3. Create a protocol MyProtocol which MyClass conforms to and then make a [MyProtocol] array. This is a little better than the Any array approach in #2 since you can decide which classes implement the protocol, so you get *some* type checking.&lt;br /&gt;&lt;br /&gt;It's tempting to add an associated type to the protocol so you know something about what's in the array, but Protocols with associated types have the same effective restrictions that Generics do and for the same reasons:&lt;br /&gt;&lt;br /&gt;protocol MyProtocol {&lt;br /&gt;&amp;nbsp; &amp;nbsp; associatedtype MyType&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&quot;Protocol 'SettingProtocol' can only be used as a generic constraint because it has Self or associated type requirements&quot;.&lt;br /&gt;&lt;br /&gt;So why not just have an abstract superclass that you can actually put some logic into instead of having to deal with the unreliable nature of default implementations of functions on your protocol?&lt;br /&gt;&lt;br /&gt;It's also good to know that MyProtocol can't have Self requirements (like Equatable does) if you want to have it be the type of an array. This keeps you from making an array of Equatable which makes sense since you can equate any 2 Doubles, but not a Double and a String. Big Nerd Ranch goes into this in a little more depth: https://www.bignerdranch.com/blog/why-associated-type-requirements-become-generic-constraints/&lt;br /&gt;&lt;br /&gt;3. The Type Erasure Pattern&lt;br /&gt;&lt;a href=&quot;https://www.bignerdranch.com/blog/breaking-down-type-erasure-in-swift/&quot;&gt;https://www.bignerdranch.com/blog/breaking-down-type-erasure-in-swift/&lt;/a&gt;&lt;br /&gt;The Type Erasure Pattern is a solution to a *different* problem. Instead of letting you make an array of different types, it allows you to make an array of different classes of objects that conform to the same protocol with the &lt;i&gt;same&lt;/i&gt; associated type. So it won't let you fake your way to [1, &quot;2&quot;, Dictionary] but it will let you effectively make something like [IntHandler(1), DifferentKindOfIntHandler(1), VeryDifferentIntHandler(1)].&lt;br /&gt;&lt;br /&gt;Since Type Erasure Pattern essentially substitutes a class for the protocol, to me this seems functionally equivalent to making an abstract generic class MyClass&lt;type&gt; and then making an array of MyClass&lt;int&gt; but with extra steps. The payoff for those steps is that you then get to effectively use a protocol instead of a class which can be a big help in a complex project, but YAGNI, probably.&lt;/int&gt;&lt;/type&gt;&lt;br /&gt;&lt;br /&gt;Note: Type Erasure is a CS term that in swift means &quot;use generics&quot;, and the Type Erasure Pattern is a particular software design pattern relying heavily on the use of generics.&lt;br /&gt;&lt;br /&gt;4. Enums with associated values&lt;br /&gt;&lt;br /&gt;From https://github.com/VinceBurn/SwiftyPlist/blob/master/Pod/Classes/Plist.swift:&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; enum EntityType {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case string(String)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case number(NSNumber)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case date(Date)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case data(Data)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case array([Plist])&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case dictionary([String : Plist])&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&lt;br /&gt;let arr = [EntityType.string(&quot;Foo&quot;), EntityType.date(Date())]&lt;br /&gt;&lt;br /&gt;Interestingly, Enums With Associated Values are how Optionals work in Swift - the compiler creates an enum with the associated value of YourType: https://medium.com/ios-os-x-development/swift-optionals-78dafaa53f3&lt;br /&gt;&lt;br /&gt;Writing to an enum with an associated type is &lt;i&gt;most&lt;/i&gt; elegant but getting a primitive value back out from one requires a lot of awful switch case code. My impulse was to immediately try to encapsulate the accessor code away behind a StringSetting or IntSetting class that knows exactly what data type it's managing and can expose a primitive property. Which brings me back around to my original idea...&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;5. Just make an abstract class with very limited functionality and make subclasses that explicitly expose a primitive of the the type they handle:&lt;br /&gt;&lt;br /&gt;let arr:[AbstractSetting] = [StringSetting(&quot;Foo&quot;), IntSetting(1)]&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content><author><name>Scott McCoy</name></author><summary type="html">Most common data formats (Json, Plist, XML) support arrays of mixed types like: [“foo”, 1, {“a”:3}]I often find myself wanting to make a wrapper that provides functionality like CustomStringConvertible, serialization to UserDefaults and so forth and then make an array of it:let arr = MyClassBut I want to be able to tell what the instance of MyClass is wrapping, so I want MyClass to be generic:let firstElem = MyClass(1)let secondElem = MyClass(“Foo”)let arr = [firstElem, secondElem]But this results in “Heterogeneous collection literal could only be inferred to ‘[Any]’; add explicit type annotation if this is intentional” since firstElem is of type MyClass&amp;lt;Int&amp;gt; and secondElem is of type MyClass&amp;lt;String&amp;gt;.&amp;nbsp;Making it an array of MyClass also doesn’t work:let arr:[MyClass] = [firstElem, secondElem] -&amp;gt; “Cannot convert value of type ‘MyClass' to expected element type 'MyClass'&quot;&quot;The compiler treats them as completely different data types!So what are some actual solutions?1. Make an array of your class type but make the type parameter Any:let firstElem:MyClass = MyClass(1)let secondElem:MyClass = MyClass(&quot;Foo&quot;)arr:[MyClass] = [ firstElem, secondElem]Note that this wipes out the utility of having MyClass even be generic since instances of it are now explicitly MyClass&amp;lt;Any&amp;gt;rather than a MyClass&amp;lt;Int&amp;gt; and secondElem and MyClass&amp;lt;String&amp;gt;.2. Make an array of Any:let arr:[Any] = [firstElem, secondElem]We get the benefits of generics, but the risk of an Any array.Note that it’s tempting to try and hide the array inside a container and then gate access to it with a func:func add(item:MyClass) {  }But this gets you a “Reference to generic type ‘MyClass’ requires arguments in &amp;lt;…&amp;gt;”“3. Create a protocol MyProtocol which MyClass conforms to and then make a [MyProtocol] array. This is a little better than the Any array approach in #2 since you can decide which classes implement the protocol, so you get some type checking.It’s tempting to add an associated type to the protocol so you know something about what’s in the array, but Protocols with associated types have the same effective restrictions that Generics do and for the same reasons:protocol MyProtocol {    associatedtype MyType}“Protocol ‘SettingProtocol’ can only be used as a generic constraint because it has Self or associated type requirements”.So why not just have an abstract superclass that you can actually put some logic into instead of having to deal with the unreliable nature of default implementations of functions on your protocol?It’s also good to know that MyProtocol can’t have Self requirements (like Equatable does) if you want to have it be the type of an array. This keeps you from making an array of Equatable which makes sense since you can equate any 2 Doubles, but not a Double and a String. Big Nerd Ranch goes into this in a little more depth: https://www.bignerdranch.com/blog/why-associated-type-requirements-become-generic-constraints/3. The Type Erasure Patternhttps://www.bignerdranch.com/blog/breaking-down-type-erasure-in-swift/The Type Erasure Pattern is a solution to a different problem. Instead of letting you make an array of different types, it allows you to make an array of different classes of objects that conform to the same protocol with the same associated type. So it won’t let you fake your way to [1, “2”, Dictionary] but it will let you effectively make something like [IntHandler(1), DifferentKindOfIntHandler(1), VeryDifferentIntHandler(1)].Since Type Erasure Pattern essentially substitutes a class for the protocol, to me this seems functionally equivalent to making an abstract generic class MyClass and then making an array of MyClass but with extra steps. The payoff for those steps is that you then get to effectively use a protocol instead of a class which can be a big help in a complex project, but YAGNI, probably.Note: Type Erasure is a CS term that in swift means “use generics”, and the Type Erasure Pattern is a particular software design pattern relying heavily on the use of generics.4. Enums with associated valuesFrom https://github.com/VinceBurn/SwiftyPlist/blob/master/Pod/Classes/Plist.swift:    enum EntityType {        case string(String)        case number(NSNumber)        case date(Date)        case data(Data)        case array([Plist])        case dictionary([String : Plist])    }let arr = [EntityType.string(“Foo”), EntityType.date(Date())]Interestingly, Enums With Associated Values are how Optionals work in Swift - the compiler creates an enum with the associated value of YourType: https://medium.com/ios-os-x-development/swift-optionals-78dafaa53f3Writing to an enum with an associated type is most elegant but getting a primitive value back out from one requires a lot of awful switch case code. My impulse was to immediately try to encapsulate the accessor code away behind a StringSetting or IntSetting class that knows exactly what data type it’s managing and can expose a primitive property. Which brings me back around to my original idea…5. Just make an abstract class with very limited functionality and make subclasses that explicitly expose a primitive of the the type they handle:let arr:[AbstractSetting] = [StringSetting(“Foo”), IntSetting(1)]</summary></entry><entry><title type="html">TIL - Use of Selector or #selector now requires the function be @objc</title><link href="http://localhost:4000/2020/01/08/til-use-of-selector-or-selector-now.html" rel="alternate" type="text/html" title="TIL - Use of Selector or #selector now requires the function be @objc" /><published>2020-01-08T12:21:00-08:00</published><updated>2020-01-08T12:21:00-08:00</updated><id>http://localhost:4000/2020/01/08/til-use-of-selector-or-selector-now</id><content type="html" xml:base="http://localhost:4000/2020/01/08/til-use-of-selector-or-selector-now.html">That's it, that's the post.</content><author><name>Scott McCoy</name></author><summary type="html">That’s it, that’s the post.</summary></entry><entry><title type="html">Impossible Tickets - Slice Them!</title><link href="http://localhost:4000/2020/01/07/impossible-tickets-slice-them.html" rel="alternate" type="text/html" title="Impossible Tickets - Slice Them!" /><published>2020-01-07T11:52:00-08:00</published><updated>2020-01-07T11:52:00-08:00</updated><id>http://localhost:4000/2020/01/07/impossible-tickets-slice-them</id><content type="html" xml:base="http://localhost:4000/2020/01/07/impossible-tickets-slice-them.html">A task that seemed simple, measurable, and completable in a single sprint has turned out to be based on untrue assumptions that have rendered the task completely impossible. What do we do with the ticket? For velocity to be a useful metric it has to capture estimation mistakes like this but there's good arguments on both sides for what to do with it:&lt;br /&gt;&lt;br /&gt;&lt;div data-reddit-rtjson=&quot;{&amp;quot;entityMap&amp;quot;:{},&amp;quot;blocks&amp;quot;:[{&amp;quot;key&amp;quot;:&amp;quot;4lg48&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;Archive it: The project commitment drops by a small amount so we're still a few points closer to the project's finish line. Velocity maintains integrity as an overall measurement of the average number of SPs per sprint that are *successfully* completed, counting estimation learning experiences like this one&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;unstyled&amp;quot;,&amp;quot;depth&amp;quot;:0,&amp;quot;inlineStyleRanges&amp;quot;:[],&amp;quot;entityRanges&amp;quot;:[],&amp;quot;data&amp;quot;:{}},{&amp;quot;key&amp;quot;:&amp;quot;bg0vv&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;Move it to Done: The team is a bit happier that they don't \&amp;quot;lose points\&amp;quot;&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;unstyled&amp;quot;,&amp;quot;depth&amp;quot;:0,&amp;quot;inlineStyleRanges&amp;quot;:[],&amp;quot;entityRanges&amp;quot;:[],&amp;quot;data&amp;quot;:{}},{&amp;quot;key&amp;quot;:&amp;quot;18ppd&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;Slice It: move the completed portion to Done and archive the impossible portion:&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;unstyled&amp;quot;,&amp;quot;depth&amp;quot;:0,&amp;quot;inlineStyleRanges&amp;quot;:[],&amp;quot;entityRanges&amp;quot;:[],&amp;quot;data&amp;quot;:{}}]}&quot;&gt;&lt;div class=&quot;&quot; data-block=&quot;true&quot; data-editor=&quot;9ccba6&quot; data-offset-key=&quot;8tbs5-0-0&quot;&gt;&lt;div class=&quot;public-DraftStyleDefault-block public-DraftStyleDefault-ltr&quot; data-offset-key=&quot;8tbs5-0-0&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;span data-offset-key=&quot;8tbs5-0-0&quot;&gt;Move it to Done: The team is a bit happier that they don't &quot;lose points&quot;, but the Definition of Done becomes fuzzy by expanding it to include &quot;Stuff that is technically not done&quot;.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span data-offset-key=&quot;8tbs5-0-0&quot;&gt;Archive It: The project commitment drops by a small amount so we're still a few points closer to the project's finish line. Velocity maintains integrity as an overall measurement of the average number of SPs per sprint that are &lt;b&gt;successfully&lt;/b&gt; completed, counting estimation learning experiences like this one.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span data-offset-key=&quot;blus6-0-0&quot;&gt;Slice It: Split the ticket and move the completed portion to Done and archive the impossible portion. The team is happy that they get &lt;i&gt;some&lt;/i&gt; credit and velocity maintains integrity as a metric of work successfully completed per sprint.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-reddit-rtjson=&quot;{&amp;quot;entityMap&amp;quot;:{},&amp;quot;blocks&amp;quot;:[{&amp;quot;key&amp;quot;:&amp;quot;rbk9&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;A task that seemed simple, measurable, and completable in a single sprint has turned out to be based on untrue assumptions that have rendered the task completely impossible. Do we move the ticket to Done or just archive it? I think that for our velocity to be a useful metric it has to capture estimation mistakes like this but there's good arguments on both sides for what to do with it:&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;unstyled&amp;quot;,&amp;quot;depth&amp;quot;:0,&amp;quot;inlineStyleRanges&amp;quot;:[],&amp;quot;entityRanges&amp;quot;:[],&amp;quot;data&amp;quot;:{}}]}&quot;&gt;&lt;/div&gt;&lt;div data-reddit-rtjson=&quot;{&amp;quot;entityMap&amp;quot;:{},&amp;quot;blocks&amp;quot;:[{&amp;quot;key&amp;quot;:&amp;quot;f3aph&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;A task that seemed simple, measurable, and completable in a single sprint has turned out to be based on untrue assumptions that have rendered the task completely impossible. Do we move the ticket to Done or just archive it? I think that for our velocity to be a useful metric it has to capture estimation mistakes like this but there's good arguments on both sides for what to do with it:&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;unstyled&amp;quot;,&amp;quot;depth&amp;quot;:0,&amp;quot;inlineStyleRanges&amp;quot;:[],&amp;quot;entityRanges&amp;quot;:[],&amp;quot;data&amp;quot;:{}}]}&quot;&gt;&lt;/div&gt;&lt;div data-reddit-rtjson=&quot;{&amp;quot;entityMap&amp;quot;:{},&amp;quot;blocks&amp;quot;:[{&amp;quot;key&amp;quot;:&amp;quot;f3aph&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;A task that seemed simple, measurable, and completable in a single sprint has turned out to be based on untrue assumptions that have rendered the task completely impossible. Do we move the ticket to Done or just archive it? I think that for our velocity to be a useful metric it has to capture estimation mistakes like this but there's good arguments on both sides for what to do with it:&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;unstyled&amp;quot;,&amp;quot;depth&amp;quot;:0,&amp;quot;inlineStyleRanges&amp;quot;:[],&amp;quot;entityRanges&amp;quot;:[],&amp;quot;data&amp;quot;:{}}]}&quot;&gt;&lt;/div&gt;&lt;div data-reddit-rtjson=&quot;{&amp;quot;entityMap&amp;quot;:{},&amp;quot;blocks&amp;quot;:[{&amp;quot;key&amp;quot;:&amp;quot;f3aph&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;A task that seemed simple, measurable, and completable in a single sprint has turned out to be based on untrue assumptions that have rendered the task completely impossible. Do we move the ticket to Done or just archive it? I think that for our velocity to be a useful metric it has to capture estimation mistakes like this but there's good arguments on both sides for what to do with it:&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;unstyled&amp;quot;,&amp;quot;depth&amp;quot;:0,&amp;quot;inlineStyleRanges&amp;quot;:[],&amp;quot;entityRanges&amp;quot;:[],&amp;quot;data&amp;quot;:{}}]}&quot;&gt;&lt;/div&gt;&lt;div data-reddit-rtjson=&quot;{&amp;quot;entityMap&amp;quot;:{},&amp;quot;blocks&amp;quot;:[{&amp;quot;key&amp;quot;:&amp;quot;12q8o&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;A task that seemed simple, measurable, and completable in a single sprint has turned out to be based on untrue assumptions that have rendered the task completely impossible. Do we move the ticket to Done or just archive it? I think that for our velocity to be a useful metric it has to capture estimation mistakes like this but there's good arguments on both sides for what to do with it:&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;unstyled&amp;quot;,&amp;quot;depth&amp;quot;:0,&amp;quot;inlineStyleRanges&amp;quot;:[],&amp;quot;entityRanges&amp;quot;:[],&amp;quot;data&amp;quot;:{}}]}&quot;&gt;&lt;/div&gt;&lt;div data-reddit-rtjson=&quot;{&amp;quot;entityMap&amp;quot;:{},&amp;quot;blocks&amp;quot;:[{&amp;quot;key&amp;quot;:&amp;quot;12q8o&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;A task that seemed simple, measurable, and completable in a single sprint has turned out to be based on untrue assumptions that have rendered the task completely impossible. Do we move the ticket to Done or just archive it? I think that for our velocity to be a useful metric it has to capture estimation mistakes like this but there's good arguments on both sides for what to do with it:&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;unstyled&amp;quot;,&amp;quot;depth&amp;quot;:0,&amp;quot;inlineStyleRanges&amp;quot;:[],&amp;quot;entityRanges&amp;quot;:[],&amp;quot;data&amp;quot;:{}}]}&quot;&gt;&lt;/div&gt;</content><author><name>Scott McCoy</name></author><summary type="html">A task that seemed simple, measurable, and completable in a single sprint has turned out to be based on untrue assumptions that have rendered the task completely impossible. What do we do with the ticket? For velocity to be a useful metric it has to capture estimation mistakes like this but there’s good arguments on both sides for what to do with it:&amp;lt;div data-reddit-rtjson=&quot;{&amp;quot;entityMap&amp;quot;:{},&amp;quot;blocks&amp;quot;:[{&amp;quot;key&amp;quot;:&amp;quot;4lg48&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;Archive it: The project commitment drops by a small amount so we're still a few points closer to the project's finish line. Velocity maintains integrity as an overall measurement of the average number of SPs per sprint that are *successfully* completed, counting estimation learning experiences like this one&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;unstyled&amp;quot;,&amp;quot;depth&amp;quot;:0,&amp;quot;inlineStyleRanges&amp;quot;:[],&amp;quot;entityRanges&amp;quot;:[],&amp;quot;data&amp;quot;:{}},{&amp;quot;key&amp;quot;:&amp;quot;bg0vv&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;Move it to Done: The team is a bit happier that they don't \&amp;quot;lose points\&amp;quot;&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;unstyled&amp;quot;,&amp;quot;depth&amp;quot;:0,&amp;quot;inlineStyleRanges&amp;quot;:[],&amp;quot;entityRanges&amp;quot;:[],&amp;quot;data&amp;quot;:{}},{&amp;quot;key&amp;quot;:&amp;quot;18ppd&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;Slice It: move the completed portion to Done and archive the impossible portion:&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;unstyled&amp;quot;,&amp;quot;depth&amp;quot;:0,&amp;quot;inlineStyleRanges&amp;quot;:[],&amp;quot;entityRanges&amp;quot;:[],&amp;quot;data&amp;quot;:{}}]}&quot;&amp;gt;&amp;lt;div class=&quot;&quot; data-block=&quot;true&quot; data-editor=&quot;9ccba6&quot; data-offset-key=&quot;8tbs5-0-0&quot;&amp;gt;&amp;lt;div class=&quot;public-DraftStyleDefault-block public-DraftStyleDefault-ltr&quot; data-offset-key=&quot;8tbs5-0-0&quot;&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;Move it to Done: The team is a bit happier that they don’t “lose points”, but the Definition of Done becomes fuzzy by expanding it to include “Stuff that is technically not done”.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Archive It: The project commitment drops by a small amount so we’re still a few points closer to the project’s finish line. Velocity maintains integrity as an overall measurement of the average number of SPs per sprint that are successfully completed, counting estimation learning experiences like this one.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Slice It: Split the ticket and move the completed portion to Done and archive the impossible portion. The team is happy that they get some credit and velocity maintains integrity as a metric of work successfully completed per sprint.&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div data-reddit-rtjson=&quot;{&amp;quot;entityMap&amp;quot;:{},&amp;quot;blocks&amp;quot;:[{&amp;quot;key&amp;quot;:&amp;quot;rbk9&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;A task that seemed simple, measurable, and completable in a single sprint has turned out to be based on untrue assumptions that have rendered the task completely impossible. Do we move the ticket to Done or just archive it? I think that for our velocity to be a useful metric it has to capture estimation mistakes like this but there's good arguments on both sides for what to do with it:&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;unstyled&amp;quot;,&amp;quot;depth&amp;quot;:0,&amp;quot;inlineStyleRanges&amp;quot;:[],&amp;quot;entityRanges&amp;quot;:[],&amp;quot;data&amp;quot;:{}}]}&quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div data-reddit-rtjson=&quot;{&amp;quot;entityMap&amp;quot;:{},&amp;quot;blocks&amp;quot;:[{&amp;quot;key&amp;quot;:&amp;quot;f3aph&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;A task that seemed simple, measurable, and completable in a single sprint has turned out to be based on untrue assumptions that have rendered the task completely impossible. Do we move the ticket to Done or just archive it? I think that for our velocity to be a useful metric it has to capture estimation mistakes like this but there's good arguments on both sides for what to do with it:&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;unstyled&amp;quot;,&amp;quot;depth&amp;quot;:0,&amp;quot;inlineStyleRanges&amp;quot;:[],&amp;quot;entityRanges&amp;quot;:[],&amp;quot;data&amp;quot;:{}}]}&quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div data-reddit-rtjson=&quot;{&amp;quot;entityMap&amp;quot;:{},&amp;quot;blocks&amp;quot;:[{&amp;quot;key&amp;quot;:&amp;quot;f3aph&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;A task that seemed simple, measurable, and completable in a single sprint has turned out to be based on untrue assumptions that have rendered the task completely impossible. Do we move the ticket to Done or just archive it? I think that for our velocity to be a useful metric it has to capture estimation mistakes like this but there's good arguments on both sides for what to do with it:&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;unstyled&amp;quot;,&amp;quot;depth&amp;quot;:0,&amp;quot;inlineStyleRanges&amp;quot;:[],&amp;quot;entityRanges&amp;quot;:[],&amp;quot;data&amp;quot;:{}}]}&quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div data-reddit-rtjson=&quot;{&amp;quot;entityMap&amp;quot;:{},&amp;quot;blocks&amp;quot;:[{&amp;quot;key&amp;quot;:&amp;quot;f3aph&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;A task that seemed simple, measurable, and completable in a single sprint has turned out to be based on untrue assumptions that have rendered the task completely impossible. Do we move the ticket to Done or just archive it? I think that for our velocity to be a useful metric it has to capture estimation mistakes like this but there's good arguments on both sides for what to do with it:&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;unstyled&amp;quot;,&amp;quot;depth&amp;quot;:0,&amp;quot;inlineStyleRanges&amp;quot;:[],&amp;quot;entityRanges&amp;quot;:[],&amp;quot;data&amp;quot;:{}}]}&quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div data-reddit-rtjson=&quot;{&amp;quot;entityMap&amp;quot;:{},&amp;quot;blocks&amp;quot;:[{&amp;quot;key&amp;quot;:&amp;quot;12q8o&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;A task that seemed simple, measurable, and completable in a single sprint has turned out to be based on untrue assumptions that have rendered the task completely impossible. Do we move the ticket to Done or just archive it? I think that for our velocity to be a useful metric it has to capture estimation mistakes like this but there's good arguments on both sides for what to do with it:&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;unstyled&amp;quot;,&amp;quot;depth&amp;quot;:0,&amp;quot;inlineStyleRanges&amp;quot;:[],&amp;quot;entityRanges&amp;quot;:[],&amp;quot;data&amp;quot;:{}}]}&quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div data-reddit-rtjson=&quot;{&amp;quot;entityMap&amp;quot;:{},&amp;quot;blocks&amp;quot;:[{&amp;quot;key&amp;quot;:&amp;quot;12q8o&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;A task that seemed simple, measurable, and completable in a single sprint has turned out to be based on untrue assumptions that have rendered the task completely impossible. Do we move the ticket to Done or just archive it? I think that for our velocity to be a useful metric it has to capture estimation mistakes like this but there's good arguments on both sides for what to do with it:&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;unstyled&amp;quot;,&amp;quot;depth&amp;quot;:0,&amp;quot;inlineStyleRanges&amp;quot;:[],&amp;quot;entityRanges&amp;quot;:[],&amp;quot;data&amp;quot;:{}}]}&quot;&amp;gt;&amp;lt;/div&amp;gt;</summary></entry></feed>